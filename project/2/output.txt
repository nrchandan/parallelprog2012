
COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              1

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.77636e-13       21.034060

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|1|1|21.035189628|mops|mopspersec|22074707084|1015128777||30.892|0.01|0.44|3|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              2

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.07914e-13       10.568360

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|2|2|10.569583599|mops|mopspersec|22126658577|1030877077||39.405|0.02|0.44|11|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              3

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.67866e-13        7.050682

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|3|3|7.052051227|mops|mopspersec|22119161975|1031543068||41.383|0.01|0.44|9|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              4

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.75335e-14        5.296795

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|4|4|5.298109774|mops|mopspersec|22154529058|1041101555||42.734|0.01|0.44|13|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              5

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      1.9762e-13        4.274529

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|5|5|4.275836288|mops|mopspersec|22215304065|1058296771||33.529|0.02|0.44|13|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              6

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.11022e-13        3.523449

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|6|6|3.524825691|mops|mopspersec|22136613535|1037184135||33.004|0.02|0.44|11|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              7

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.62981e-13        3.057485

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|7|7|3.058757648|mops|mopspersec|22340254380|1093451049||31.132|0.02|0.44|14|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              8

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      2.4869e-14        2.693446

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|8|8|2.694755104|mops|mopspersec|22483985702|1129721103||24.250|0.02|0.44|22|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              9

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.37668e-13        2.412509

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|9|9|2.413773761|mops|mopspersec|22726274392|1199309331||22.322|0.02|0.44|17|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              10

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.44089e-16        2.170099

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|10|10|2.171468084|mops|mopspersec|22451453908|1129498962||27.182|0.02|0.44|14|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              11

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.33227e-13        1.990182

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|11|11|1.991370117|mops|mopspersec|22518012147|1140404471||22.700|0.02|0.43|14|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              12

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     6.70575e-14        1.817344

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|12|12|1.818745487|mops|mopspersec|22356352309|1099420450||25.487|0.03|0.43|13|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              13

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     7.14984e-14        1.673976

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|13|13|1.675190069|mops|mopspersec|22128694290|1039754902||22.804|0.03|0.43|12|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              14

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.88498e-15        1.561316

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|14|14|1.562603974|mops|mopspersec|22345243517|1100099839||20.923|0.03|0.43|14|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              15

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.11022e-14        1.458374

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|15|15|1.459743512|mops|mopspersec|22256964865|1078129495||21.900|0.03|0.43|14|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              16

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.90799e-14        1.714335

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|16|16|1.715752379|mops|mopspersec|24333423573|1668834276||16.944|0.03|0.43|32|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              17

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      4.4853e-14        1.903393

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|17|17|1.904838954|mops|mopspersec|22066742620|1014552416||19.729|0.03|0.43|48|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              18

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.08722e-14        1.919146

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|18|18|1.920647135|mops|mopspersec|22059470147|1014552732||21.810|0.02|0.43|48|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              19

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.24185e-14        2.071848

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|19|19|2.073577488|mops|mopspersec|22066513984|1014667611||19.423|0.03|0.43|51|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              20

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     6.21725e-14        1.901996

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|20|20|1.903622519|mops|mopspersec|22065734251|1014945985||18.906|0.03|0.43|61|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              21

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.90958e-14        1.772973

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|21|21|1.774749929|mops|mopspersec|22061557567|1014893950||18.739|0.03|0.43|71|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              22

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.93099e-14        1.796373

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|22|22|1.798172854|mops|mopspersec|22068738794|1015140440||20.222|0.03|0.43|64|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              23

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     7.14984e-14        1.684516

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|23|23|1.686424525|mops|mopspersec|22066417531|1015040282||19.779|0.03|0.43|82|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              24

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     8.88178e-16        1.576631

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|24|24|1.578369127|mops|mopspersec|22060133690|1014918983||18.996|0.03|0.43|91|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              25

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.42109e-14        1.716853

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|25|25|1.718832006|mops|mopspersec|22058812786|1015093412||20.189|0.03|0.43|80|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              26

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.81917e-14        1.681354

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|26|26|1.683113564|mops|mopspersec|22064904024|1015175879||20.070|0.03|0.43|87|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              27

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.21885e-14        1.770651

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|27|27|1.772563943|mops|mopspersec|22065904099|1015367919||19.116|0.03|0.43|103|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              28

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.22045e-14        1.616585

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|28|28|1.618432972|mops|mopspersec|22066139952|1015382398||19.316|0.03|0.43|89|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              29

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.57572e-14        1.724510

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|29|29|1.726237710|mops|mopspersec|22064925033|1015592388||19.222|0.03|0.43|107|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              30

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      9.9476e-14        1.954370

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|30|30|1.956399686|mops|mopspersec|22054812139|1014921019||20.463|0.03|0.43|94|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              31

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.84057e-14        1.879575

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|31|31|1.881322072|mops|mopspersec|22053379645|1015230598||19.608|0.03|0.43|98|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              32

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.59712e-14        1.530405

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|32|32|1.532499592|mops|mopspersec|22051663602|1015407908||19.093|0.03|0.43|114|static|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              1

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.77636e-13       21.031091

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|1|1|21.032087488|mops|mopspersec|22074194486|1014773940||41.548|0.01|0.44|1|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              2

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.07914e-13       10.620164

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|2|2|10.621389691|mops|mopspersec|22199200421|1049905166||31.837|0.01|0.44|4|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              3

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.67866e-13        7.025110

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|3|3|7.026452811|mops|mopspersec|22083811985|1019792979||49.691|0.01|0.44|5|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              4

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.75335e-14        5.269200

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|4|4|5.270411351|mops|mopspersec|22090914343|1018354486||42.277|0.01|0.44|5|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              5

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      1.9762e-13        4.263072

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|5|5|4.264370484|mops|mopspersec|22267374220|1069759116||34.968|0.01|0.44|11|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              6

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.11022e-13        3.538522

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|6|6|3.540080294|mops|mopspersec|22139540124|1037353938||30.113|0.02|0.44|13|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              7

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.62981e-13        3.056806

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|7|7|3.058133927|mops|mopspersec|22374914764|1102045794||26.572|0.02|0.44|16|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              8

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      2.4869e-14        2.686151

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|8|8|2.687544329|mops|mopspersec|22356415916|1094244214||23.823|0.02|0.44|19|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              9

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.37224e-13        2.410729

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|9|9|2.411967308|mops|mopspersec|22490641679|1141058793||22.908|0.02|0.44|12|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              10

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593               0        2.137079

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|10|10|2.138457036|mops|mopspersec|22328522825|1091476278||25.126|0.02|0.44|14|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              11

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.33227e-13        1.981383

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|11|11|1.982707605|mops|mopspersec|22382915942|1101589858||23.845|0.02|0.43|14|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              12

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     6.61693e-14        1.844081

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|12|12|1.845494533|mops|mopspersec|22566527369|1153889233||25.855|0.03|0.43|12|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              13

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     7.10543e-14        1.760010

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|13|13|1.761539387|mops|mopspersec|23102800300|1313624596||21.270|0.03|0.43|15|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              14

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.88498e-15        1.558087

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|14|14|1.559584227|mops|mopspersec|22230436183|1058430579||19.998|0.03|0.43|13|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              15

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.11022e-14        1.457649

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|15|15|1.458724911|mops|mopspersec|22282756068|1082217464||22.194|0.03|0.43|14|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              16

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.95239e-14        1.368575

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|16|16|1.370296454|mops|mopspersec|22221974535|1064152469||24.493|0.03|0.43|15|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              17

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.52971e-14        1.862705

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|17|17|1.864516134|mops|mopspersec|22061069872|1014319518||20.220|0.03|0.43|42|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              18

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.17604e-14        1.790468

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|18|18|1.791977960|mops|mopspersec|22066663620|1014698284||20.119|0.03|0.43|43|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              19

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.24185e-14        1.893161

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|19|19|1.894991929|mops|mopspersec|22063718802|1014708634||22.017|0.03|0.43|58|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              20

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     6.21725e-14        1.909210

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|20|20|1.911180659|mops|mopspersec|22064959264|1014737995||23.240|0.03|0.43|61|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              21

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.86517e-14        1.688513

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|21|21|1.690217052|mops|mopspersec|22061385017|1014496661||19.293|0.03|0.43|81|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              22

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.93099e-14        1.562232

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|22|22|1.563907298|mops|mopspersec|22066274375|1014847659||19.485|0.03|0.43|89|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              23

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     7.23865e-14        1.794021

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|23|23|1.795748454|mops|mopspersec|22067971856|1015028373||19.941|0.03|0.43|68|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              24

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     8.88178e-16        1.585319

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|24|24|1.587126201|mops|mopspersec|22062882993|1015083849||19.348|0.03|0.43|83|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              25

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.42109e-14        1.651089

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|25|25|1.652958202|mops|mopspersec|22061308514|1014942530||18.388|0.03|0.43|106|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              26

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.90799e-14        1.848541

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|26|26|1.850459882|mops|mopspersec|22060625688|1015056591||20.706|0.03|0.43|87|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              27

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.13003e-14        1.718085

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|27|27|1.719971596|mops|mopspersec|22060918283|1015123202||19.824|0.03|0.43|89|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              28

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.22045e-14        1.566871

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|28|28|1.568698296|mops|mopspersec|22061313296|1014862905||19.336|0.03|0.43|112|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              29

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.57572e-14        1.701632

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|29|29|1.703619281|mops|mopspersec|22066621681|1015417594||19.739|0.03|0.43|116|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              30

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.00364e-13        1.691055

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|30|30|1.692953114|mops|mopspersec|22057366714|1015113129||18.115|0.03|0.43|112|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              31

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     5.01821e-14        1.738559

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|31|31|1.740458843|mops|mopspersec|22062005312|1015515618||20.028|0.03|0.43|113|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              32

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.59712e-14        1.534206

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|32|32|1.535922903|mops|mopspersec|22053652804|1015148882||19.586|0.03|0.43|93|dynamic|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              1

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.77636e-13       21.030577

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|1|1|21.031631209|mops|mopspersec|22071824655|1014425743||49.454|0.01|0.44|0|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              2

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.07914e-13       10.587160

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|2|2|10.588294764|mops|mopspersec|22150824705|1038975049||33.695|0.01|0.44|8|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              3

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.67866e-13        7.091994

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|3|3|7.093093674|mops|mopspersec|22253755984|1069898881||35.121|0.01|0.44|2|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              4

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.75335e-14        5.328086

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|4|4|5.329268071|mops|mopspersec|22312475883|1084741153||38.057|0.01|0.44|6|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              5

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      1.9762e-13        4.337920

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|5|5|4.339413156|mops|mopspersec|22486764683|1135987026||26.875|0.02|0.44|11|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              6

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.10578e-13        3.538347

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|6|6|3.539678284|mops|mopspersec|22165195785|1043913148||28.764|0.02|0.44|13|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              7

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.62981e-13        3.056581

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|7|7|3.057798959|mops|mopspersec|22371808275|1101444061||28.006|0.02|0.44|10|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              8

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593      2.4869e-14        2.683372

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|8|8|2.684827099|mops|mopspersec|22359342773|1098319278||27.721|0.02|0.44|15|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              9

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.37224e-13        2.404819

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|9|9|2.406316816|mops|mopspersec|22492015007|1132100255||27.194|0.02|0.44|18|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              10

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.44089e-16        2.170510

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|10|10|2.172067028|mops|mopspersec|22247919533|1071242877||29.550|0.03|0.43|14|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              11

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.33227e-13        1.985580

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|11|11|1.986990620|mops|mopspersec|22379049260|1109461412||23.056|0.03|0.43|16|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              12

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     6.61693e-14        1.812413

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|12|12|1.813838121|mops|mopspersec|22401321620|1104747232||22.302|0.03|0.43|14|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              13

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     7.06102e-14        1.683647

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|13|13|1.685248163|mops|mopspersec|22336082236|1091633420||21.589|0.03|0.43|15|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              14

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.88498e-15        1.562377

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|14|14|1.563815276|mops|mopspersec|22308747780|1091390212||24.442|0.03|0.43|17|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              15

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.11022e-14        1.458640

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|15|15|1.459799762|mops|mopspersec|22245209990|1074397386||22.342|0.03|0.43|14|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              16

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.95239e-14        1.368977

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|16|16|1.370135720|mops|mopspersec|22230699570|1068712525||21.183|0.03|0.43|15|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              17

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.57412e-14        1.782840

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|17|17|1.784772263|mops|mopspersec|22069813040|1014980115||22.896|0.03|0.43|43|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              18

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.08722e-14        2.073911

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|18|18|2.075666447|mops|mopspersec|22061380358|1014858991||19.208|0.03|0.43|53|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              19

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.19744e-14        2.007933

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|19|19|2.009705855|mops|mopspersec|22055465311|1014599379||18.196|0.03|0.43|54|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              20

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     6.30607e-14        1.637847

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|20|20|1.639578430|mops|mopspersec|22061289079|1015027821||18.149|0.03|0.43|64|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              21

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.90958e-14        2.064935

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|21|21|2.066637468|mops|mopspersec|22067282600|1014961165||23.237|0.03|0.43|63|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              22

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.93099e-14        1.860635

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|22|22|1.862241071|mops|mopspersec|22069498227|1015214240||20.345|0.03|0.43|79|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              23

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     7.10543e-14        1.594052

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|23|23|1.595825746|mops|mopspersec|22064205069|1014848218||18.930|0.03|0.43|102|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              24

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.33227e-15        1.792365

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|24|24|1.794071189|mops|mopspersec|22069421032|1015122800||20.709|0.03|0.43|85|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              25

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.37668e-14        1.667609

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|25|25|1.669751133|mops|mopspersec|22060445201|1015008001||21.149|0.03|0.43|71|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              26

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.90799e-14        1.752534

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|26|26|1.754418267|mops|mopspersec|22065143269|1015142275||20.265|0.03|0.43|77|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              27

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.30767e-14        1.556479

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|27|27|1.558314074|mops|mopspersec|22059963494|1015415420||18.117|0.03|0.43|99|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              28

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.22045e-14        1.673334

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|28|28|1.675064355|mops|mopspersec|22066109419|1015513978||19.073|0.03|0.43|95|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              29

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     2.62013e-14        1.839977

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|29|29|1.841745994|mops|mopspersec|22060116153|1015494501||19.075|0.03|0.43|107|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              30

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     1.00364e-13        1.567760

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|30|30|1.569910357|mops|mopspersec|22062282365|1015398271||22.449|0.03|0.43|155|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              31

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     4.92939e-14        1.829351

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|31|31|1.831326999|mops|mopspersec|22066445265|1015397662||20.851|0.03|0.43|109|guided,4|

COMPUTE_PI
  C/OpenMP version

  Estimate the value of PI by summing a series.

  Number of processors available = 16
  Number of threads =              32

R8_TEST:
  Estimate the value of PI,
  using double arithmetic.

  N = number of terms computed and added;

  MODE = SEQ for sequential code;
  MODE = OMP for Open MP enabled code;
  (performance depends on whether Open MP is used,
  and how many processes are available)

  ESTIMATE = the computed estimate of PI;

  ERROR = ( the computed estimate - PI );

  TIME = elapsed wall clock time;

  Note that you can''t increase N forever, because:
  A) ROUNDOFF starts to be a problem, and
  B) maximum integer size is a problem.

             N Mode    Estimate        Error           Time

    1000000000  OMP        3.141593     3.59712e-14        1.837772

COMPUTE_PI
  Normal end of execution.
stat_id|suite| Performance counter stats for './compute_pi':|class|32|32|1.839812130|mops|mopspersec|22064332485|1015755514||18.379|0.03|0.43|136|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     7.8963332960

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|1|1|7.953449064|mops|mopspersec|24099639905|1550766696||67.172|0.02|1.27|0|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    17.6389001950

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|2|2|17.699168933|mops|mopspersec|106477778639|18973692551||2.876|0.13|1.26|6|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    12.5291369930

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|3|3|12.589420709|mops|mopspersec|109179485343|19450807262||3.743|0.20|1.21|2|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    10.9925535050

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|4|4|11.056419786|mops|mopspersec|110995144692|19835367236||57.297|0.30|1.05|5|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     9.0812122610

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|5|5|9.172693187|mops|mopspersec|108910443163|19519532400||21.768|0.18|1.01|16|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     8.4372130650

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|6|6|8.505382781|mops|mopspersec|112076826630|20061496453||52.396|0.36|0.92|25|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     7.4660742100

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|7|7|7.534920647|mops|mopspersec|113573682271|20380615687||47.249|0.41|0.90|20|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     7.0855643910

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|8|8|7.169475877|mops|mopspersec|113631505669|20394094784||47.516|0.42|0.83|28|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.6325898950

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|9|9|6.702188662|mops|mopspersec|113521113593|20385753014||46.552|0.40|0.79|23|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.3161915280

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|10|10|6.385765591|mops|mopspersec|114345086441|20572581220||46.648|0.43|0.75|21|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.3294205850

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|11|11|6.431006167|mops|mopspersec|115743328905|20948817769||49.832|0.47|0.69|19|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.2472476450

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|12|12|6.348703848|mops|mopspersec|116729784861|21179915035||46.037|0.52|0.65|17|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.5900401510

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|13|13|6.691242426|mops|mopspersec|119509913922|21842690614||47.845|0.60|0.58|16|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     7.0083820320

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|14|14|7.113052326|mops|mopspersec|123664995496|22920865956||48.888|0.72|0.52|15|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     7.1732449230

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|15|15|7.276110340|mops|mopspersec|126236670613|23743717485||48.808|0.76|0.49|16|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     8.1182153290

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|16|16|8.223844128|mops|mopspersec|132291483501|25530716471||48.764|0.84|0.42|15|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     5.1969102840

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|17|17|5.259776576|mops|mopspersec|112386132360|20096599621||34.406|0.42|0.74|126|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     5.1377514060

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|18|18|5.200987863|mops|mopspersec|111725715238|19975416684||40.145|0.37|0.72|139|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.4065024210

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|19|19|6.467259991|mops|mopspersec|121434217718|22379452934||47.588|0.62|0.53|226|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.3671681110

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|20|20|6.428624958|mops|mopspersec|121263430052|22388103281||46.622|0.66|0.53|193|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.1195326240

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|21|21|6.182205685|mops|mopspersec|118755055059|21579703766||44.541|0.57|0.58|114|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     5.2351341720

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|22|22|5.296388724|mops|mopspersec|116184003968|21020163554||32.895|0.61|0.63|110|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     6.2905250060

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|23|23|6.350046562|mops|mopspersec|120647240044|22329398808||47.428|0.63|0.54|352|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     5.5075746550

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|24|24|5.570686049|mops|mopspersec|115345894966|20659269955||37.432|0.49|0.67|121|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     4.9428377760

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|25|25|5.004447636|mops|mopspersec|113902447464|20293782060||8.107|0.42|0.73|139|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     5.5932072080

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|26|26|5.656425468|mops|mopspersec|117356032354|21490187336||44.178|0.58|0.59|232|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     4.2205447120

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|27|27|4.283338311|mops|mopspersec|110820970012|19764463718||9.350|0.33|0.77|177|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     5.4877191700

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|28|28|5.550601393|mops|mopspersec|115699646371|21019001061||47.081|0.49|0.61|286|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     7.7778502880

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|29|29|7.838285806|mops|mopspersec|128246989057|25063931702||45.398|0.82|0.44|342|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     4.2191598610

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|30|30|4.281974833|mops|mopspersec|109587677758|19545443777||8.801|0.29|0.78|285|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     4.2212578170

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|31|31|4.282990393|mops|mopspersec|109776674511|19577584340||9.542|0.32|0.79|241|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Static
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00     4.9590908680

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|32|32|5.020896028|mops|mopspersec|114234705650|20359407300||4.899|0.35|0.73|131|static|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    24.7268667820

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|1|1|24.784033868|mops|mopspersec|66149635667|10560364025||59.826|0.02|1.12|1|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    42.8935191280

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|2|2|42.955665282|mops|mopspersec|69175282453|11104912969||12.964|4.67|0.34|14|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    46.7812690730

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|3|3|46.841399611|mops|mopspersec|72231027706|11645594154||1.432|6.52|0.22|6|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    75.4503568340

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|4|4|75.514657911|mops|mopspersec|74830763330|12142107150||44.606|6.85|0.10|44|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    72.3786909090

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|5|5|72.441590710|mops|mopspersec|76373971778|12439514978||43.760|6.35|0.09|73|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    78.9212668980

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|6|6|78.988184486|mops|mopspersec|78487728399|12853085812||52.878|6.21|0.07|74|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    74.4409057210

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|7|7|74.506330059|mops|mopspersec|80070979967|13200589564||51.783|6.21|0.06|62|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    75.0574139030

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|8|8|75.151812871|mops|mopspersec|82448558862|13684793252||48.982|6.50|0.06|135|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    71.7121765510

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|9|9|71.780920217|mops|mopspersec|84328680615|14061040739||48.429|6.28|0.06|165|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    67.0356912350

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|10|10|67.132823907|mops|mopspersec|86528627209|14560045857||48.385|5.94|0.05|123|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    63.4542044160

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|11|11|63.551479010|mops|mopspersec|88033065621|14889643434||48.447|5.54|0.05|44|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    59.5623655140

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|12|12|59.635409881|mops|mopspersec|90297016168|15431427345||48.539|5.25|0.05|119|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    55.5034019480

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|13|13|55.603663469|mops|mopspersec|93802167699|16292572085||48.395|5.09|0.05|53|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    52.0243084520

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|14|14|52.129140785|mops|mopspersec|97127871972|17170464521||48.820|4.69|0.06|25|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.4851484800

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|15|15|54.589410384|mops|mopspersec|98487729060|17525095109||47.895|4.87|0.05|15|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.0655693010

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|16|16|54.167214230|mops|mopspersec|98972931992|17650753714||47.682|4.84|0.05|303|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    53.3972876370

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|17|17|53.457358046|mops|mopspersec|94398730012|16510253899||49.604|4.73|0.06|1013|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    52.8083807390

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|18|18|52.868267481|mops|mopspersec|99945823578|17685677733||48.087|4.82|0.05|1128|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.8574159400

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|19|19|54.917479719|mops|mopspersec|96558599760|16854665770||47.637|4.98|0.05|1560|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    52.4916070790

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|20|20|52.551472673|mops|mopspersec|96180168098|17025062436||49.342|4.67|0.05|1136|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    52.0632210080

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|21|21|52.122785683|mops|mopspersec|100299226184|17935004678||47.545|4.76|0.05|1952|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.3887829580

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|22|22|54.447531035|mops|mopspersec|97056931389|17114895041||47.666|4.95|0.05|610|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    55.1857649650

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|23|23|55.245529673|mops|mopspersec|96559406963|16812765048||47.770|4.86|0.05|2082|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.7523967240

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|24|24|54.812455022|mops|mopspersec|96990740297|17014296678||47.390|4.97|0.05|2336|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.6377414370

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|25|25|54.697983132|mops|mopspersec|96756839199|16910597422||47.464|4.98|0.05|2003|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.8650910970

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|26|26|54.924899295|mops|mopspersec|96724943840|17042684496||47.666|5.00|0.05|2127|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    53.8312284940

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|27|27|53.890566028|mops|mopspersec|97966595171|17225852566||47.317|4.89|0.05|2086|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    53.7259799210

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|28|28|53.786045299|mops|mopspersec|98000189031|17371460514||47.546|4.91|0.05|2578|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.1535193540

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|29|29|54.215469651|mops|mopspersec|97016910372|17137194014||47.521|4.90|0.05|1153|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.4688886320

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|30|30|54.528180974|mops|mopspersec|97010985624|16969357744||47.473|4.99|0.05|1348|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    52.1650073190

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|31|31|52.224667494|mops|mopspersec|99798837591|17854939376||47.728|4.72|0.05|1926|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Parallel    1000000000    0.000000e+00    54.1185312160

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|32|32|54.178529885|mops|mopspersec|97300624609|17172685523||47.516|4.91|0.05|1196|dynamic|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     7.8925878180

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|1|1|7.949677906|mops|mopspersec|24094840312|1551111412||75.778|0.02|1.27|0|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     4.0747890970

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|2|2|4.135357087|mops|mopspersec|24211416665|1582354056||64.107|0.06|1.23|1|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     2.7551071930

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|3|3|2.817979906|mops|mopspersec|24345938726|1618564860||28.973|0.07|1.21|9|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     2.0837340850

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|4|4|2.145654362|mops|mopspersec|24415090910|1644852454||38.857|0.10|1.20|4|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.6672134080

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|5|5|1.730765654|mops|mopspersec|24420975552|1645797845||33.793|0.11|1.19|10|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.5990392110

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|6|6|1.690654879|mops|mopspersec|24894566122|1782053090||34.303|0.12|1.04|7|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.3240002100

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|7|7|1.417233958|mops|mopspersec|24756649005|1736694601||44.288|0.11|1.05|9|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.2220671500

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|8|8|1.287001712|mops|mopspersec|25167009516|1852041777||48.597|0.13|1.03|10|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.1036956960

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|9|9|1.178987551|mops|mopspersec|25002401507|1813035245||53.720|0.14|1.00|11|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0125733000

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|10|10|1.082412269|mops|mopspersec|24807009014|1758386764||53.608|0.13|0.97|12|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0689347680

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|11|11|1.168959227|mops|mopspersec|26093908698|2114868491||52.688|0.16|0.86|11|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9930425360

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|12|12|1.093971436|mops|mopspersec|25298078543|1882926924||54.313|0.18|0.82|13|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0163106040

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|13|13|1.114635365|mops|mopspersec|25781516174|2029131023||55.509|0.15|0.75|12|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9557639200

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|14|14|1.027558676|mops|mopspersec|25659747924|1999530070||56.049|0.15|0.76|15|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9245376000

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|15|15|1.026951694|mops|mopspersec|25778547956|2034353935||53.061|0.19|0.71|15|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.8782178660

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|16|16|0.979466021|mops|mopspersec|25716694787|2012845629||52.274|0.18|0.69|15|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9237012200

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|17|17|0.984688574|mops|mopspersec|24123306554|1556474504||56.002|0.15|0.79|42|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0282028390

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|18|18|1.090652110|mops|mopspersec|24109042639|1555993751||52.732|0.16|0.85|49|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0934287930

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|19|19|1.153645460|mops|mopspersec|24122221223|1557292128||51.831|0.15|0.84|43|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0733205690

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|20|20|1.132654421|mops|mopspersec|24083767727|1553992798||52.193|0.17|0.92|61|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.1393696820

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|21|21|1.199413404|mops|mopspersec|24096572220|1552479895||52.888|0.14|0.95|45|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.1157016480

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|22|22|1.177670125|mops|mopspersec|24090338364|1555462693||55.254|0.15|0.84|55|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0630713000

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|23|23|1.123606621|mops|mopspersec|24100302354|1555057670||51.077|0.18|0.78|67|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0003690290

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|24|24|1.060829185|mops|mopspersec|24129763687|1558186728||52.887|0.20|0.75|77|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9700589510

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|25|25|1.030438322|mops|mopspersec|24121534039|1557384139||53.015|0.20|0.75|75|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9787951870

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|26|26|1.039622120|mops|mopspersec|24099461700|1554401692||55.751|0.16|0.76|63|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0057619990

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|27|27|1.067941002|mops|mopspersec|24088581114|1554591540||53.479|0.19|0.78|81|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0839453460

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|28|28|1.144331854|mops|mopspersec|24090410125|1555208595||54.014|0.16|0.92|75|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9921465990

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|29|29|1.051483337|mops|mopspersec|24114204304|1557586825||52.433|0.17|0.79|87|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     1.0358335590

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|30|30|1.097478791|mops|mopspersec|24085859324|1556201040||52.450|0.19|0.78|74|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9753340010

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|31|31|1.035014797|mops|mopspersec|24098122472|1556255589||55.157|0.19|0.77|94|guided,4|

DOT_PRODUCT
  C/OpenMP version

  A program which computes a vector dot product.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Parallel    1000000000    0.000000e+00     0.9968900940

DOT_PRODUCT
  Normal end of execution.
stat_id|suite| Performance counter stats for './dot_product':|class|32|32|1.057626004|mops|mopspersec|24094920076|1555689256||52.794|0.17|0.78|110|guided,4|
14 November 2012 04:11:52 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.779459 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:53 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|1|1|0.864214931|mops|mopspersec|3181238967|445862384||55.478|0.03|1.55|0|static|
14 November 2012 04:11:53 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.4192 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:53 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|2|2|0.507410440|mops|mopspersec|3309273855|485069820||76.158|0.06|1.39|1|static|
14 November 2012 04:11:53 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.717357 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:54 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|3|3|0.806809906|mops|mopspersec|3678501934|589938398||53.086|0.06|1.20|2|static|
14 November 2012 04:11:54 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.403282 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:54 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|4|4|0.490674262|mops|mopspersec|3789734112|622123083||36.402|0.07|1.15|4|static|
14 November 2012 04:11:55 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.514103 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:55 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|5|5|0.603595188|mops|mopspersec|4192762894|735167496||50.903|0.06|1.03|4|static|
14 November 2012 04:11:55 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.381209 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:56 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|6|6|0.469349910|mops|mopspersec|4305592446|769264061||57.572|0.08|1.00|5|static|
14 November 2012 04:11:56 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.418247 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:56 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|7|7|0.552263709|mops|mopspersec|4852864332|924515970||48.835|0.07|0.85|7|static|
14 November 2012 04:11:56 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.314191 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:57 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|8|8|0.408412158|mops|mopspersec|4874967747|927894054||42.092|0.07|0.90|8|static|
14 November 2012 04:11:57 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.332945 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:57 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|9|9|0.467990518|mops|mopspersec|5408625820|1087020174||46.552|0.10|0.80|9|static|
14 November 2012 04:11:57 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.27142 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:58 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|10|10|0.405422638|mops|mopspersec|5539381456|1120309403||44.616|0.08|0.75|14|static|
14 November 2012 04:11:58 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.2848 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:58 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|11|11|0.418018321|mops|mopspersec|5867336822|1216279719||41.990|0.10|0.71|11|static|
14 November 2012 04:11:58 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.242824 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:59 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|12|12|0.370336184|mops|mopspersec|5979977235|1247190151||43.631|0.08|0.69|15|static|
14 November 2012 04:11:59 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.293048 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:11:59 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|13|13|0.426648095|mops|mopspersec|6456221171|1383908758||38.483|0.09|0.66|18|static|
14 November 2012 04:11:59 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.348231 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:00 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|14|14|0.485793367|mops|mopspersec|6772237822|1470658372||43.891|0.10|0.61|17|static|
14 November 2012 04:12:00 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.333713 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:00 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|15|15|0.482051362|mops|mopspersec|7411031763|1650253484||47.604|0.08|0.61|20|static|
14 November 2012 04:12:00 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.282587 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:01 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|16|16|0.435009667|mops|mopspersec|7453848551|1664900353||42.123|0.09|0.59|21|static|
14 November 2012 04:12:01 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.270687 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:01 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|17|17|0.363813091|mops|mopspersec|3190563778|448186816||36.244|0.12|1.12|32|static|
14 November 2012 04:12:01 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.194684 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:01 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|18|18|0.287625565|mops|mopspersec|3162637976|444779744||42.228|0.10|1.26|33|static|
14 November 2012 04:12:01 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.279388 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:02 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|19|19|0.370770688|mops|mopspersec|3216979151|452431459||41.814|0.09|1.03|45|static|
14 November 2012 04:12:02 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.18183 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:02 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|20|20|0.273092225|mops|mopspersec|3192365978|448532613||41.239|0.10|1.12|43|static|
14 November 2012 04:12:02 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.232849 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:02 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|21|21|0.323164004|mops|mopspersec|3190637262|448158551||38.610|0.11|0.99|53|static|
14 November 2012 04:12:02 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.220096 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:03 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|22|22|0.310506615|mops|mopspersec|3199086599|450907489||39.332|0.09|1.05|45|static|
14 November 2012 04:12:03 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.178726 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:03 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|23|23|0.269971388|mops|mopspersec|3186232713|447460130||34.232|0.12|1.24|84|static|
14 November 2012 04:12:03 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.16746 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:03 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|24|24|0.258148104|mops|mopspersec|3191263372|447500397||39.241|0.10|1.29|77|static|
14 November 2012 04:12:03 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.176215 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:04 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|25|25|0.268890739|mops|mopspersec|3207158307|448916834||38.978|0.09|1.07|97|static|
14 November 2012 04:12:04 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.172958 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:04 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|26|26|0.264500860|mops|mopspersec|3191099202|450304898||39.291|0.09|1.12|63|static|
14 November 2012 04:12:04 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.205768 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:04 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|27|27|0.298157087|mops|mopspersec|3195165920|448080525||39.791|0.11|0.94|71|static|
14 November 2012 04:12:04 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.216273 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:05 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|28|28|0.307605689|mops|mopspersec|3207769071|452223831||38.068|0.12|0.97|77|static|
14 November 2012 04:12:05 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.20796 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:05 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|29|29|0.300621367|mops|mopspersec|3215349879|451588357||34.015|0.13|1.00|80|static|
14 November 2012 04:12:05 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.17337 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:05 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|30|30|0.266066190|mops|mopspersec|3169018787|446722629||38.211|0.10|1.03|84|static|
14 November 2012 04:12:05 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.19091 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:06 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|31|31|0.282260187|mops|mopspersec|3191216874|448311510||37.093|0.13|0.97|94|static|
14 November 2012 04:12:06 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.188357 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:06 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|32|32|0.279332576|mops|mopspersec|3182058502|445789633||34.804|0.12|0.98|66|static|
14 November 2012 04:12:06 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.77839 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:07 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|1|1|0.864248981|mops|mopspersec|3185283957|446424125||52.210|0.04|1.55|0|dynamic|
14 November 2012 04:12:07 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.407509 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:08 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|2|2|0.494797258|mops|mopspersec|3304498331|481391445||43.031|0.06|1.42|1|dynamic|
14 November 2012 04:12:08 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.719416 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:08 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|3|3|0.807229199|mops|mopspersec|3673907852|589799207||49.736|0.05|1.20|2|dynamic|
14 November 2012 04:12:08 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.415586 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:09 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|4|4|0.503768884|mops|mopspersec|3821479359|625916114||69.829|0.08|1.14|3|dynamic|
14 November 2012 04:12:09 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.51464 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:10 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|5|5|0.603365185|mops|mopspersec|4191164114|734459893||53.226|0.07|1.03|5|dynamic|
14 November 2012 04:12:10 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.382161 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:10 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|6|6|0.471199500|mops|mopspersec|4309539289|766373982||56.887|0.06|0.99|6|dynamic|
14 November 2012 04:12:10 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.406976 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:11 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|7|7|0.494543895|mops|mopspersec|4663700606|873005684||51.789|0.06|0.93|7|dynamic|
14 November 2012 04:12:11 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.31358 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:11 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|8|8|0.401431890|mops|mopspersec|4800765407|909750542||40.352|0.09|0.92|7|dynamic|
14 November 2012 04:12:11 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.33258 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:12 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|9|9|0.466090689|mops|mopspersec|5426759869|1084925782||46.116|0.08|0.79|8|dynamic|
14 November 2012 04:12:12 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.273335 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:12 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|10|10|0.363918290|mops|mopspersec|5241067109|1037050405||45.168|0.08|0.80|9|dynamic|
14 November 2012 04:12:12 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.282451 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:12 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|11|11|0.370344280|mops|mopspersec|5461797225|1101116168||44.548|0.09|0.75|10|dynamic|
14 November 2012 04:12:13 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.249762 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:13 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|12|12|0.338452294|mops|mopspersec|5621688598|1139473241||48.440|0.08|0.72|11|dynamic|
14 November 2012 04:12:13 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.273958 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:13 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|13|13|0.429295945|mops|mopspersec|6547578209|1408616681||43.695|0.10|0.66|16|dynamic|
14 November 2012 04:12:13 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.27607 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:14 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|14|14|0.408762204|mops|mopspersec|6784332849|1472809424||44.529|0.10|0.63|16|dynamic|
14 November 2012 04:12:14 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.320064 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:14 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|15|15|0.475430352|mops|mopspersec|7143393277|1577472576||42.552|0.10|0.60|20|dynamic|
14 November 2012 04:12:14 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.298631 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:15 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|16|16|0.434921577|mops|mopspersec|7061344607|1553958672||44.076|0.10|0.57|16|dynamic|
14 November 2012 04:12:15 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.311424 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:15 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|17|17|0.399960851|mops|mopspersec|3178052810|447531034||41.920|0.08|1.05|43|dynamic|
14 November 2012 04:12:15 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.214441 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:16 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|18|18|0.306788302|mops|mopspersec|3217054293|452657043||44.141|0.10|1.19|33|dynamic|
14 November 2012 04:12:16 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.264751 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:16 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|19|19|0.355318101|mops|mopspersec|3184650628|448865576||46.486|0.08|1.07|64|dynamic|
14 November 2012 04:12:16 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.251068 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:16 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|20|20|0.341692035|mops|mopspersec|3202916715|450218834||42.725|0.10|1.02|34|dynamic|
14 November 2012 04:12:16 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.181203 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:17 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|21|21|0.270855185|mops|mopspersec|3218964011|452386668||34.226|0.13|1.17|46|dynamic|
14 November 2012 04:12:17 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.178621 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:17 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|22|22|0.269655787|mops|mopspersec|3211955473|449882627||33.638|0.12|1.09|46|dynamic|
14 November 2012 04:12:17 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.216393 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:17 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|23|23|0.309297660|mops|mopspersec|3209290099|449628363||37.489|0.10|0.92|48|dynamic|
14 November 2012 04:12:17 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.181155 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:18 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|24|24|0.272083889|mops|mopspersec|3219023267|450368185||35.547|0.12|1.17|70|dynamic|
14 November 2012 04:12:18 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.208612 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:18 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|25|25|0.300081597|mops|mopspersec|3199996194|451394098||39.095|0.10|0.99|60|dynamic|
14 November 2012 04:12:18 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.235562 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:18 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|26|26|0.325085134|mops|mopspersec|3214103420|449856563||39.400|0.10|0.98|73|dynamic|
14 November 2012 04:12:18 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.201137 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:19 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|27|27|0.290918235|mops|mopspersec|3189595915|449226410||32.869|0.13|1.01|73|dynamic|
14 November 2012 04:12:19 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.170622 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:19 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|28|28|0.259986363|mops|mopspersec|3182286975|445114452||38.846|0.10|1.04|67|dynamic|
14 November 2012 04:12:19 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.176662 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:19 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|29|29|0.268839161|mops|mopspersec|3177906780|446586097||40.587|0.10|1.04|76|dynamic|
14 November 2012 04:12:19 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.156074 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:20 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|30|30|0.248112034|mops|mopspersec|3220172955|453159587||38.377|0.10|0.99|85|dynamic|
14 November 2012 04:12:20 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.178247 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:20 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|31|31|0.271973774|mops|mopspersec|3185286997|448317574||38.860|0.13|0.93|82|dynamic|
14 November 2012 04:12:20 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.213882 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:20 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|32|32|0.304840235|mops|mopspersec|3222250665|454236200||43.979|0.10|0.92|89|dynamic|
14 November 2012 04:12:20 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.782644 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:21 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|1|1|0.868679624|mops|mopspersec|3177649465|446111273||54.229|0.04|1.55|1|guided,4|
14 November 2012 04:12:21 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.418451 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:22 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|2|2|0.506811366|mops|mopspersec|3307719056|482561026||70.848|0.06|1.39|2|guided,4|
14 November 2012 04:12:22 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.717333 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:23 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|3|3|0.806281161|mops|mopspersec|3686768631|590795746||56.466|0.05|1.20|2|guided,4|
14 November 2012 04:12:23 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.405343 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:23 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|4|4|0.496752654|mops|mopspersec|3833675238|631992050||40.151|0.06|1.15|5|guided,4|
14 November 2012 04:12:23 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.512713 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:24 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|5|5|0.604203858|mops|mopspersec|4199183802|736602858||52.654|0.07|1.03|5|guided,4|
14 November 2012 04:12:24 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.380126 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:24 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|6|6|0.469236714|mops|mopspersec|4312617921|769890798||55.308|0.08|1.00|5|guided,4|
14 November 2012 04:12:24 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.40819 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:25 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|7|7|0.496601485|mops|mopspersec|4696673592|878207060||47.577|0.08|0.93|9|guided,4|
14 November 2012 04:12:25 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.314346 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:25 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|8|8|0.402247627|mops|mopspersec|4793725687|907303395||41.741|0.07|0.91|8|guided,4|
14 November 2012 04:12:25 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.33239 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:26 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|9|9|0.466070383|mops|mopspersec|5413324412|1081960898||46.317|0.07|0.80|12|guided,4|
14 November 2012 04:12:26 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.278162 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:26 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|10|10|0.411122196|mops|mopspersec|5577405327|1123661227||43.198|0.10|0.75|9|guided,4|
14 November 2012 04:12:26 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.315013 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:27 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|11|11|0.447469751|mops|mopspersec|5979497083|1243660866||43.184|0.10|0.70|13|guided,4|
14 November 2012 04:12:27 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.258474 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:27 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|12|12|0.391692841|mops|mopspersec|6063365440|1270550908||42.583|0.08|0.68|14|guided,4|
14 November 2012 04:12:27 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.254546 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:28 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|13|13|0.387700045|mops|mopspersec|6378101350|1353811381||41.160|0.10|0.66|14|guided,4|
14 November 2012 04:12:28 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.265152 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:28 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|14|14|0.354098663|mops|mopspersec|6072042452|1274076020||46.156|0.09|0.64|13|guided,4|
14 November 2012 04:12:28 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.291218 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:29 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|15|15|0.424476418|mops|mopspersec|6749415457|1460932351||44.485|0.09|0.62|21|guided,4|
14 November 2012 04:12:29 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.33884 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:29 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|16|16|0.527939437|mops|mopspersec|7649503005|1720412685||45.619|0.08|0.58|21|guided,4|
14 November 2012 04:12:29 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.275634 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:30 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|17|17|0.367560255|mops|mopspersec|3176515308|444888859||36.989|0.12|1.03|29|guided,4|
14 November 2012 04:12:30 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.189002 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:30 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|18|18|0.279928970|mops|mopspersec|3197207460|449987322||40.849|0.11|1.26|46|guided,4|
14 November 2012 04:12:30 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.246193 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:30 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|19|19|0.338581017|mops|mopspersec|3201129218|448849009||43.473|0.11|1.05|49|guided,4|
14 November 2012 04:12:30 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.170826 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:31 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|20|20|0.260215475|mops|mopspersec|3192080545|449292453||39.417|0.12|1.24|59|guided,4|
14 November 2012 04:12:31 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.261 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:31 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|21|21|0.352312664|mops|mopspersec|3184282337|451600221||42.170|0.12|1.01|58|guided,4|
14 November 2012 04:12:31 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.22551 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:31 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|22|22|0.316073737|mops|mopspersec|3179668725|447049439||33.945|0.12|1.16|73|guided,4|
14 November 2012 04:12:31 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.185592 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:32 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|23|23|0.276898429|mops|mopspersec|3173093274|444285566||33.766|0.12|1.18|72|guided,4|
14 November 2012 04:12:32 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.17706 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:32 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|24|24|0.270334130|mops|mopspersec|3203744689|449689600||39.615|0.09|0.99|66|guided,4|
14 November 2012 04:12:32 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.20513 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:32 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|25|25|0.295746929|mops|mopspersec|3211166221|452236819||42.133|0.09|0.96|76|guided,4|
14 November 2012 04:12:32 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.297092 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:33 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|26|26|0.388401645|mops|mopspersec|3196475847|449817773||42.680|0.10|0.92|86|guided,4|
14 November 2012 04:12:33 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.215493 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:33 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|27|27|0.305756988|mops|mopspersec|3199552366|449088920||41.917|0.09|1.02|89|guided,4|
14 November 2012 04:12:33 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.194173 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:34 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|28|28|0.286301578|mops|mopspersec|3194674535|448555258||36.752|0.12|0.96|92|guided,4|
14 November 2012 04:12:34 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.209409 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:34 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|29|29|0.301257231|mops|mopspersec|3206741872|450184626||42.797|0.10|0.98|77|guided,4|
14 November 2012 04:12:34 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.194019 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:34 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|30|30|0.283903396|mops|mopspersec|3192772336|450975013||39.675|0.11|0.94|108|guided,4|
14 November 2012 04:12:34 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.197882 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:35 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|31|31|0.289500738|mops|mopspersec|3201075656|447981292||39.116|0.09|1.09|90|guided,4|
14 November 2012 04:12:35 PM

MANDELBROT_OPENMP
  C/OpenMP version

  Create an ASCII PPM image of the Mandelbrot set.

  For each point C = X + i*Y
  with X range [-2.25,1.25]
  and  Y range [-1.75,1.75]
  carry out 2000 iterations of the map
  Z(n+1) = Z(n)^2 + C.
  If the iterates stay bounded (norm less than 2)
  then C is taken to be a member of the set.

  An ASCII PPM image of the set is created using
    M = 500 pixels in the X direction and
    N = 500 pixels in the Y direction.

  Time = 0.201393 seconds.

  Graphics data written to "mandelbrot.ppm".

MANDELBROT_OPENMP
  Normal end of execution.

14 November 2012 04:12:35 PM
stat_id|suite| Performance counter stats for './mandelbrot_openmp':|class|32|32|0.292991472|mops|mopspersec|3202029756|451338197||36.437|0.13|0.94|114|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              1

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 119.810404
  Rate = MegaOPS/dT = -9.847802

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|1|1|119.813832225|mops|mopspersec|384485135188|16097655160||11.161|1.46|1.35|1|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              2

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 60.105602
  Rate = MegaOPS/dT = -19.629937

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|2|2|60.109635491|mops|mopspersec|384396832610|16106742072||22.050|1.46|1.34|33|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              3

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 42.446206
  Rate = MegaOPS/dT = -27.796812

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|3|3|42.450216841|mops|mopspersec|384634740451|16181396933||18.577|1.44|1.28|36|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              4

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 32.507871
  Rate = MegaOPS/dT = -36.294877

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|4|4|32.512017437|mops|mopspersec|384881181436|16225027872||11.705|1.43|1.26|39|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              5

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 27.963425
  Rate = MegaOPS/dT = -42.193299

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|5|5|27.967464099|mops|mopspersec|384996435551|16269908070||14.524|1.42|1.21|47|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              6

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 24.541392
  Rate = MegaOPS/dT = -48.076701

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|6|6|24.546089762|mops|mopspersec|385163311620|16313187545||14.224|1.42|1.19|52|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              7

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 23.924887
  Rate = MegaOPS/dT = -49.315559

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|7|7|23.930203196|mops|mopspersec|385364407346|16363711627||11.444|1.39|1.11|39|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              8

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 21.840326
  Rate = MegaOPS/dT = -54.022507

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|8|8|21.844684361|mops|mopspersec|385482193431|16400296615||16.658|1.42|1.18|40|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              9

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 19.260950
  Rate = MegaOPS/dT = -61.257060

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|9|9|19.266057011|mops|mopspersec|385617806498|16439801260||6.898|1.36|1.02|46|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              10

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 18.448897
  Rate = MegaOPS/dT = -63.953373

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|10|10|18.453763287|mops|mopspersec|385964151000|16521363635||15.542|1.35|0.96|53|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              11

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 19.012468
  Rate = MegaOPS/dT = -62.057655

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|11|11|19.017555523|mops|mopspersec|386057447178|16554266090||12.614|1.31|0.90|27|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              12

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 19.339139
  Rate = MegaOPS/dT = -61.009394

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|12|12|19.343910399|mops|mopspersec|386106002442|16569916594||9.221|1.26|0.79|29|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              13

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.990476
  Rate = MegaOPS/dT = -69.442974

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|13|13|16.997171477|mops|mopspersec|386374918432|16656932258||12.754|1.26|0.81|36|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              14

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.532702
  Rate = MegaOPS/dT = -71.365779

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|14|14|16.537840860|mops|mopspersec|386564045408|16681472697||12.016|1.21|0.73|28|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              15

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.561496
  Rate = MegaOPS/dT = -75.819777

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|15|15|15.566646557|mops|mopspersec|386138826592|16554819422||11.429|1.18|0.72|18|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              16

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.597544
  Rate = MegaOPS/dT = -80.826556

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|16|16|14.602605616|mops|mopspersec|386114513881|16557603230||11.347|1.18|0.70|15|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              17

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.351831
  Rate = MegaOPS/dT = -72.155173

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|17|17|16.357399964|mops|mopspersec|384710604103|16160850118||7.296|1.24|0.75|223|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              18

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.776939
  Rate = MegaOPS/dT = -74.784415

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|18|18|15.782283579|mops|mopspersec|384603505998|16152350356||8.942|1.26|0.78|192|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              19

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.526643
  Rate = MegaOPS/dT = -71.391945

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|19|19|16.532813135|mops|mopspersec|384697352355|16167199633||5.440|1.22|0.72|390|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              20

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.796950
  Rate = MegaOPS/dT = -74.689685

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|20|20|15.802854777|mops|mopspersec|384712847430|16161097566||12.592|1.25|0.76|385|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              21

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.142697
  Rate = MegaOPS/dT = -68.826345

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|21|21|17.147718143|mops|mopspersec|384622116825|16151786611||8.337|1.27|0.80|167|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              22

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.859586
  Rate = MegaOPS/dT = -69.982099

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|22|22|16.865705275|mops|mopspersec|384629175025|16148129964||8.964|1.28|0.81|167|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              23

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.410323
  Rate = MegaOPS/dT = -71.897987

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|23|23|16.415927342|mops|mopspersec|384567582242|16149620972||8.768|1.27|0.82|231|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              24

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.888749
  Rate = MegaOPS/dT = -74.258154

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|24|24|15.895000898|mops|mopspersec|384659303180|16158286503||8.789|1.26|0.78|183|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              25

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.318118
  Rate = MegaOPS/dT = -72.304246

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|25|25|16.324342678|mops|mopspersec|384659413630|16160836924||10.641|1.24|0.75|571|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              26

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.425034
  Rate = MegaOPS/dT = -71.833592

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|26|26|16.431255454|mops|mopspersec|384642264069|16151498118||11.064|1.30|0.86|259|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              27

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.662048
  Rate = MegaOPS/dT = -75.333007

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|27|27|15.667819929|mops|mopspersec|384645165294|16161792793||8.131|1.24|0.75|452|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              28

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.009987
  Rate = MegaOPS/dT = -69.363321

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|28|28|17.016145648|mops|mopspersec|384654705828|16156107779||9.734|1.26|0.78|176|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              29

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.684283
  Rate = MegaOPS/dT = -75.226210

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|29|29|15.690475894|mops|mopspersec|384637931386|16157641812||6.936|1.26|0.77|479|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              30

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.361549
  Rate = MegaOPS/dT = -72.112314

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|30|30|16.367890489|mops|mopspersec|384649875049|16157461285||10.572|1.26|0.79|221|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              31

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.391660
  Rate = MegaOPS/dT = -76.656398

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|31|31|15.397394289|mops|mopspersec|384700037104|16166716081||6.441|1.24|0.75|659|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Static
  Chunk Size =                     1
  Number of threads =              32

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.993722
  Rate = MegaOPS/dT = -78.690883

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|32|32|14.999529589|mops|mopspersec|384678218349|16166191205||7.368|1.23|0.73|631|static|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              1

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 119.817330
  Rate = MegaOPS/dT = -9.847233

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|1|1|119.820818797|mops|mopspersec|384384491687|16097515719||19.866|1.46|1.35|1|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              2

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 60.041447
  Rate = MegaOPS/dT = -19.650912

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|2|2|60.044962767|mops|mopspersec|384490730494|16116890925||13.863|1.46|1.34|9|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              3

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 40.033766
  Rate = MegaOPS/dT = -29.471851

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|3|3|40.037966954|mops|mopspersec|384533419897|16108088107||17.548|1.45|1.34|16|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              4

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 32.411226
  Rate = MegaOPS/dT = -36.403103

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|4|4|32.414891932|mops|mopspersec|384552284300|16137555502||16.887|1.43|1.25|13|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              5

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 25.870521
  Rate = MegaOPS/dT = -45.606703

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|5|5|25.874591486|mops|mopspersec|384590228024|16154785396||13.648|1.43|1.25|32|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              6

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 22.773454
  Rate = MegaOPS/dT = -51.808970

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|6|6|22.777661349|mops|mopspersec|384645630633|16162922913||20.830|1.42|1.18|38|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              7

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 20.093453
  Rate = MegaOPS/dT = -58.719085

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|7|7|20.098125523|mops|mopspersec|384923697954|16236161282||17.805|1.41|1.15|35|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              8

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.214393
  Rate = MegaOPS/dT = -68.539692

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|8|8|17.218567288|mops|mopspersec|385102347666|16301977740||20.851|1.41|1.18|29|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              9

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.201327
  Rate = MegaOPS/dT = -68.591753

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|9|9|17.206131760|mops|mopspersec|385066728292|16287199034||14.783|1.38|1.05|65|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              10

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.771115
  Rate = MegaOPS/dT = -66.392524

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|10|10|17.776037874|mops|mopspersec|385225829686|16303416102||10.971|1.32|0.91|33|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              11

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.857449
  Rate = MegaOPS/dT = -69.990968

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|11|11|16.862435452|mops|mopspersec|385559770727|16408430907||12.546|1.31|0.87|30|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              12

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.596284
  Rate = MegaOPS/dT = -71.092373

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|12|12|16.601187363|mops|mopspersec|385272314817|16316218190||11.841|1.28|0.81|29|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              13

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.913721
  Rate = MegaOPS/dT = -74.141626

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|13|13|15.918763236|mops|mopspersec|385706184663|16447616145||13.652|1.26|0.78|30|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              14

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.043104
  Rate = MegaOPS/dT = -73.543696

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|14|14|16.048289086|mops|mopspersec|385532566125|16382092111||10.491|1.20|0.72|14|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              15

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.631859
  Rate = MegaOPS/dT = -80.636997

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|15|15|14.636954116|mops|mopspersec|385578095795|16440077323||9.562|1.22|0.74|14|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              16

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.559987
  Rate = MegaOPS/dT = -81.035042

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|16|16|14.565163448|mops|mopspersec|385420791695|16381621140||12.400|1.18|0.70|15|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              17

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.705419
  Rate = MegaOPS/dT = -80.233635

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|17|17|14.711282147|mops|mopspersec|384672293823|16160804521||10.798|1.23|0.74|267|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              18

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.613573
  Rate = MegaOPS/dT = -80.737898

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|18|18|14.618535926|mops|mopspersec|384705014997|16163401673||11.643|1.23|0.74|306|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              19

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.598434
  Rate = MegaOPS/dT = -80.821625

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|19|19|14.604046479|mops|mopspersec|384649524942|16162083051||8.438|1.23|0.74|332|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              20

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.601857
  Rate = MegaOPS/dT = -80.802680

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|20|20|14.607237031|mops|mopspersec|384713043744|16164528072||8.607|1.23|0.74|484|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              21

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.628538
  Rate = MegaOPS/dT = -80.655304

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|21|21|14.634589312|mops|mopspersec|384679339047|16159223363||7.817|1.23|0.74|454|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              22

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.557171
  Rate = MegaOPS/dT = -81.050721

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|22|22|14.563113919|mops|mopspersec|384722442887|16170304007||8.962|1.21|0.70|726|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              23

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.637789
  Rate = MegaOPS/dT = -80.604328

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|23|23|14.643806144|mops|mopspersec|384657301815|16160098615||10.666|1.24|0.75|590|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              24

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.679723
  Rate = MegaOPS/dT = -80.374075

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|24|24|14.685749674|mops|mopspersec|384641581624|16158334480||8.775|1.23|0.75|201|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              25

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.618454
  Rate = MegaOPS/dT = -80.710943

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|25|25|14.624076153|mops|mopspersec|384687968024|16163495849||6.525|1.23|0.73|627|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              26

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.514416
  Rate = MegaOPS/dT = -71.444804

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|26|26|16.520297040|mops|mopspersec|384741644907|16175996366||5.313|1.22|0.70|470|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              27

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.689110
  Rate = MegaOPS/dT = -80.322714

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|27|27|14.695031402|mops|mopspersec|384669561358|16155319165||9.154|1.27|0.80|220|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              28

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.621196
  Rate = MegaOPS/dT = -80.695803

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|28|28|14.626931157|mops|mopspersec|384645542052|16159460865||8.092|1.25|0.76|571|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              29

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.598286
  Rate = MegaOPS/dT = -80.822449

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|29|29|14.604125993|mops|mopspersec|384702943244|16165839270||9.338|1.24|0.74|559|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              30

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.541034
  Rate = MegaOPS/dT = -81.140664

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|30|30|14.547110081|mops|mopspersec|384780619818|16182968265||10.544|1.20|0.70|447|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              31

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.562084
  Rate = MegaOPS/dT = -81.023376

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|31|31|14.568133645|mops|mopspersec|384714198170|16173232884||7.351|1.21|0.70|579|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Dynamic
  Chunk Size =                     1
  Number of threads =              32

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.611759
  Rate = MegaOPS/dT = -80.747923

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|32|32|14.617864510|mops|mopspersec|384670351683|16163996892||7.634|1.24|0.74|452|dynamic|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              1

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 119.925084
  Rate = MegaOPS/dT = -9.838385

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|1|1|119.928500987|mops|mopspersec|384359301704|16100357988||9.552|1.46|1.35|1|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              2

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 60.033748
  Rate = MegaOPS/dT = -19.653432

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|2|2|60.037659795|mops|mopspersec|384472369536|16122761081||29.556|1.46|1.34|18|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              3

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 40.052920
  Rate = MegaOPS/dT = -29.457757

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|3|3|40.056403298|mops|mopspersec|384578953385|16149667093||17.517|1.46|1.34|20|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              4

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 31.833082
  Rate = MegaOPS/dT = -37.064246

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|4|4|31.836932482|mops|mopspersec|384818326280|16218191731||23.078|1.44|1.27|34|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              5

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 28.312011
  Rate = MegaOPS/dT = -41.673804

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|5|5|28.316118381|mops|mopspersec|384941452276|16270931323||14.534|1.41|1.17|42|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              6

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 24.146345
  Rate = MegaOPS/dT = -48.863263

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|6|6|24.150188270|mops|mopspersec|384933716856|16241818996||18.539|1.40|1.12|45|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              7

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 20.986283
  Rate = MegaOPS/dT = -56.220969

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|7|7|20.990322304|mops|mopspersec|385319400788|16360520926||16.975|1.40|1.14|38|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              8

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 20.863465
  Rate = MegaOPS/dT = -56.551928

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|8|8|20.868052089|mops|mopspersec|385592606893|16413630386||18.370|1.36|1.02|21|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              9

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 18.740716
  Rate = MegaOPS/dT = -62.957530

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|9|9|18.745589071|mops|mopspersec|385689019300|16452253109||14.688|1.38|1.07|36|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              10

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.221457
  Rate = MegaOPS/dT = -68.511578

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|10|10|17.226410341|mops|mopspersec|385868558646|16502800794||13.227|1.35|0.96|49|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              11

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 18.280300
  Rate = MegaOPS/dT = -64.543206

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|11|11|18.285176811|mops|mopspersec|386106154709|16547652742||12.188|1.34|0.94|29|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              12

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.211233
  Rate = MegaOPS/dT = -68.552276

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|12|12|17.216582886|mops|mopspersec|386255817782|16613466096||7.229|1.27|0.81|25|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              13

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.099325
  Rate = MegaOPS/dT = -69.000922

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|13|13|17.104310776|mops|mopspersec|386442656826|16658884451||7.268|1.24|0.76|31|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              14

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.054964
  Rate = MegaOPS/dT = -73.489368

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|14|14|16.061041926|mops|mopspersec|386673949265|16712281209||11.572|1.23|0.75|22|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              15

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.102894
  Rate = MegaOPS/dT = -78.122059

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|15|15|15.107606105|mops|mopspersec|386772490384|16753335862||6.019|1.21|0.74|19|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              16

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.706194
  Rate = MegaOPS/dT = -80.229404

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|16|16|14.711387212|mops|mopspersec|386944241614|16805703413||7.405|1.16|0.70|16|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              17

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 18.811381
  Rate = MegaOPS/dT = -62.721028

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|17|17|18.817176892|mops|mopspersec|384597121133|16157498566||8.434|1.24|0.76|312|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              18

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.579459
  Rate = MegaOPS/dT = -75.732361

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|18|18|15.585514915|mops|mopspersec|384641789160|16158086030||7.873|1.23|0.76|295|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              19

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.614591
  Rate = MegaOPS/dT = -80.732277

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|19|19|14.620414149|mops|mopspersec|384701652857|16165189567||10.095|1.22|0.72|362|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              20

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.204031
  Rate = MegaOPS/dT = -68.580974

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|20|20|17.209804959|mops|mopspersec|384682758797|16165636435||6.361|1.21|0.72|397|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              21

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.676319
  Rate = MegaOPS/dT = -66.748580

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|21|21|17.682258583|mops|mopspersec|384704542325|16169161901||10.446|1.21|0.73|223|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              22

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.096168
  Rate = MegaOPS/dT = -73.301245

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|22|22|16.102196613|mops|mopspersec|384712470156|16169199317||6.235|1.25|0.75|471|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              23

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 16.165814
  Rate = MegaOPS/dT = -72.985450

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|23|23|16.171732267|mops|mopspersec|384685382905|16163385090||7.905|1.24|0.74|349|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              24

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.092887
  Rate = MegaOPS/dT = -78.173858

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|24|24|15.098467505|mops|mopspersec|384720380964|16163443622||5.668|1.25|0.75|665|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              25

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.127188
  Rate = MegaOPS/dT = -77.996594

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|25|25|15.132969876|mops|mopspersec|384712330638|16170375487||7.736|1.21|0.70|829|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              26

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.179030
  Rate = MegaOPS/dT = -77.730211

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|26|26|15.184753351|mops|mopspersec|384741420316|16176704947||5.759|1.21|0.70|887|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              27

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.221561
  Rate = MegaOPS/dT = -68.511163

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|27|27|17.227483610|mops|mopspersec|384691362407|16161898556||7.411|1.25|0.77|346|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              28

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.458193
  Rate = MegaOPS/dT = -76.326463

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|28|28|15.464382508|mops|mopspersec|384713635102|16168932777||7.603|1.24|0.75|654|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              29

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 14.892140
  Rate = MegaOPS/dT = -79.227646

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|29|29|14.898271228|mops|mopspersec|384669511720|16162769330||9.640|1.24|0.75|544|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              30

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 17.106857
  Rate = MegaOPS/dT = -68.970542

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|30|30|17.112818276|mops|mopspersec|384730997753|16177252971||8.032|1.21|0.72|98|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              31

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.123556
  Rate = MegaOPS/dT = -78.015329

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|31|31|15.129203180|mops|mopspersec|384686547067|16162109086||9.159|1.24|0.75|590|guided,4|

MXM
  C/OpenMP version.

  Matrix multiplication tests.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Guided
  Chunk Size =                     4
  Number of threads =              32

R8_MXM matrix multiplication timing.
  A(LxN) = B(LxM) * C(MxN).
  L = 2000
  M = 2000
  N = 2000
  Floating point OPS roughly -1179869184
  Elapsed time dT = 15.440484
  Rate = MegaOPS/dT = -76.414002

MXM:
  Normal end of execution.
stat_id|suite| Performance counter stats for './mxm':|class|32|32|15.445733312|mops|mopspersec|384695195431|16170623345||8.031|1.24|0.74|177|guided,4|
14 November 2012 04:49:13 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        2.496000

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:16 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|1|1|3.581522051|mops|mopspersec|6925889577|385615475||13.063|6.65|0.81|0|static|
14 November 2012 04:49:16 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        1.491697

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:19 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|2|2|2.590344771|mops|mopspersec|7048661393|420425372||16.121|7.03|0.72|2|static|
14 November 2012 04:49:19 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        1.052915

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:21 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|3|3|2.146976246|mops|mopspersec|7056288755|426613948||23.242|7.18|0.68|6|static|
14 November 2012 04:49:21 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.882748

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:23 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|4|4|1.979340340|mops|mopspersec|7122055242|446142468||22.536|7.28|0.63|6|static|
14 November 2012 04:49:23 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        1.176602

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:25 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|5|5|2.267517897|mops|mopspersec|7586241980|575064854||27.884|6.01|0.53|4|static|
14 November 2012 04:49:25 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.860529

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:27 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|6|6|1.970022567|mops|mopspersec|7871869063|659830686||26.820|6.76|0.55|5|static|
14 November 2012 04:49:27 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.789506

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:29 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|7|7|1.892209861|mops|mopspersec|8216165742|756593701||26.470|6.86|0.51|9|static|
14 November 2012 04:49:29 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.686745

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:31 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|8|8|1.779187113|mops|mopspersec|7362199551|513606481||23.791|7.04|0.45|8|static|
14 November 2012 04:49:31 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.620905

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:33 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|9|9|1.720870557|mops|mopspersec|8515089584|840080701||27.982|6.39|0.53|9|static|
14 November 2012 04:49:33 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.794929

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:35 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|10|10|1.901752385|mops|mopspersec|8733383078|903076067||31.606|6.82|0.45|14|static|
14 November 2012 04:49:35 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.725797

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:37 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|11|11|1.818370827|mops|mopspersec|8782435483|915545051||34.379|6.39|0.44|11|static|
14 November 2012 04:49:37 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.678801

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:39 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|12|12|1.787574400|mops|mopspersec|8762680169|912743425||31.308|6.23|0.41|16|static|
14 November 2012 04:49:39 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.567540

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:40 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|13|13|1.670278530|mops|mopspersec|8528317214|840108688||29.418|7.04|0.40|13|static|
14 November 2012 04:49:40 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.566392

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:42 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|14|14|1.658685187|mops|mopspersec|7950630368|679442509||32.567|6.68|0.35|13|static|
14 November 2012 04:49:42 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.511832

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:44 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|15|15|1.606373856|mops|mopspersec|7916971593|663743757||29.721|6.72|0.35|14|static|
14 November 2012 04:49:44 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.519247

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:45 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|16|16|1.623467817|mops|mopspersec|8539734282|843141981||24.886|5.96|0.35|16|static|
14 November 2012 04:49:45 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.757748

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:47 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|17|17|1.846968729|mops|mopspersec|6933623402|389056780||57.011|6.56|0.36|43|static|
14 November 2012 04:49:47 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.711628

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:49 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|18|18|1.803085759|mops|mopspersec|6929326327|389196665||51.233|6.75|0.34|36|static|
14 November 2012 04:49:49 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.715459

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:51 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|19|19|1.830380682|mops|mopspersec|6932598266|388555558||52.453|6.85|0.34|42|static|
14 November 2012 04:49:51 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.596964

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:53 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|20|20|1.699252819|mops|mopspersec|6942651158|389287576||50.791|6.76|0.35|45|static|
14 November 2012 04:49:53 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.584532

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:54 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|21|21|1.671775990|mops|mopspersec|6936057270|389089956||48.049|7.01|0.35|49|static|
14 November 2012 04:49:54 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.725145

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:56 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|22|22|1.821463221|mops|mopspersec|6930001011|389517392||51.430|6.56|0.34|60|static|
14 November 2012 04:49:56 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.668756

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:49:58 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|23|23|1.761484133|mops|mopspersec|6936240293|389696238||53.460|6.33|0.34|54|static|
14 November 2012 04:49:58 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.723404

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:00 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|24|24|1.824534381|mops|mopspersec|6927364917|388804429||52.766|6.83|0.35|67|static|
14 November 2012 04:50:00 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.626270

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:02 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|25|25|1.725509734|mops|mopspersec|6925058304|388791388||53.993|6.49|0.34|53|static|
14 November 2012 04:50:02 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.665953

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:04 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|26|26|1.756572990|mops|mopspersec|6929466610|388870160||52.885|6.46|0.35|76|static|
14 November 2012 04:50:04 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.685204

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:05 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|27|27|1.773946909|mops|mopspersec|6924226733|389181695||53.376|6.60|0.34|80|static|
14 November 2012 04:50:05 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.766090

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:07 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|28|28|1.859556526|mops|mopspersec|6945860480|389910057||54.999|6.71|0.36|95|static|
14 November 2012 04:50:07 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.681169

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:09 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|29|29|1.778664970|mops|mopspersec|6938382249|389250013||55.435|6.45|0.37|80|static|
14 November 2012 04:50:09 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.579582

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:11 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|30|30|1.673353683|mops|mopspersec|6944438642|390687710||49.953|6.83|0.32|93|static|
14 November 2012 04:50:11 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.662079

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:13 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|31|31|1.756389449|mops|mopspersec|6926072666|389023877||51.753|6.61|0.36|91|static|
14 November 2012 04:50:13 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Static
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.626560

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:14 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|32|32|1.721250294|mops|mopspersec|6918945563|389416201||56.154|6.50|0.34|93|static|
14 November 2012 04:50:14 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        2.496598

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:18 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|1|1|3.592565470|mops|mopspersec|6920635312|385764902||12.968|6.64|0.81|0|dynamic|
14 November 2012 04:50:18 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        1.378486

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:21 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|2|2|2.467224377|mops|mopspersec|6983003899|404152826||11.569|7.56|0.76|3|dynamic|
14 November 2012 04:50:21 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        1.034772

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:23 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|3|3|2.139902819|mops|mopspersec|7079466826|431743202||11.672|7.54|0.69|4|dynamic|
14 November 2012 04:50:23 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.812117

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:25 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|4|4|1.902273773|mops|mopspersec|7125672629|440074835||12.193|7.42|0.67|3|dynamic|
14 November 2012 04:50:25 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.753397

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:27 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|5|5|1.841454250|mops|mopspersec|7191054009|462841419||22.027|7.13|0.60|5|dynamic|
14 November 2012 04:50:27 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.648958

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:28 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|6|6|1.758555543|mops|mopspersec|7322512457|497334551||21.916|7.08|0.58|6|dynamic|
14 November 2012 04:50:28 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.610894

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:30 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|7|7|1.696445223|mops|mopspersec|7337129307|497847222||22.081|7.11|0.54|9|dynamic|
14 November 2012 04:50:30 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.564433

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:32 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|8|8|1.658200766|mops|mopspersec|7385015926|517349158||22.301|6.91|0.52|9|dynamic|
14 November 2012 04:50:32 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.538631

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:34 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|9|9|1.644966441|mops|mopspersec|7563274749|564427105||21.916|6.95|0.49|8|dynamic|
14 November 2012 04:50:34 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.511624

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:35 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|10|10|1.615825401|mops|mopspersec|7625042869|581905537||23.491|6.51|0.47|10|dynamic|
14 November 2012 04:50:35 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.504363

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:37 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|11|11|1.594681887|mops|mopspersec|7509311977|560471716||23.307|6.74|0.44|11|dynamic|
14 November 2012 04:50:37 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.492322

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:38 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|12|12|1.586277900|mops|mopspersec|7574898727|576437401||24.406|6.44|0.42|11|dynamic|
14 November 2012 04:50:39 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.482440

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:40 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|13|13|1.580064275|mops|mopspersec|7574625525|584593649||24.486|6.51|0.40|12|dynamic|
14 November 2012 04:50:40 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.488904

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:42 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|14|14|1.591231207|mops|mopspersec|7850661381|650671565||25.649|6.13|0.38|14|dynamic|
14 November 2012 04:50:42 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.492142

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:43 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|15|15|1.585820276|mops|mopspersec|7724049102|615347589||26.050|6.12|0.35|14|dynamic|
14 November 2012 04:50:43 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.488344

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:45 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|16|16|1.587840684|mops|mopspersec|7949505944|677979183||28.872|5.27|0.34|15|dynamic|
14 November 2012 04:50:45 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.622251

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:47 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|17|17|1.716546465|mops|mopspersec|6939753180|388678362||24.817|6.70|0.46|37|dynamic|
14 November 2012 04:50:47 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.492581

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:48 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|18|18|1.584144212|mops|mopspersec|6940737688|390063312||25.950|6.42|0.35|36|dynamic|
14 November 2012 04:50:48 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.492925

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:50 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|19|19|1.584578723|mops|mopspersec|6935270190|388307874||23.176|6.87|0.45|40|dynamic|
14 November 2012 04:50:50 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.492709

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:52 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|20|20|1.587852515|mops|mopspersec|6937237673|389177795||24.662|6.56|0.39|45|dynamic|
14 November 2012 04:50:52 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.520285

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:53 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|21|21|1.615821896|mops|mopspersec|6938770162|387957352||24.806|6.73|0.39|42|dynamic|
14 November 2012 04:50:53 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.491383

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:55 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|22|22|1.582605634|mops|mopspersec|6922561327|387746668||25.653|6.47|0.37|60|dynamic|
14 November 2012 04:50:55 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.518538

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:57 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|23|23|1.612755538|mops|mopspersec|6915503171|389248969||25.530|6.64|0.37|50|dynamic|
14 November 2012 04:50:57 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.502009

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:50:58 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|24|24|1.595660172|mops|mopspersec|6923107885|388490489||25.376|6.66|0.39|55|dynamic|
14 November 2012 04:50:58 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.513443

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:00 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|25|25|1.601540798|mops|mopspersec|6926038945|388125129||25.947|6.67|0.37|50|dynamic|
14 November 2012 04:51:00 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.518241

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:02 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|26|26|1.610443729|mops|mopspersec|6952453595|390617395||25.155|6.80|0.38|48|dynamic|
14 November 2012 04:51:02 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.487228

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:03 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|27|27|1.588501288|mops|mopspersec|6937500186|387850539||26.047|6.45|0.37|79|dynamic|
14 November 2012 04:51:03 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.494821

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:05 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|28|28|1.583367257|mops|mopspersec|6920889216|388166513||25.319|6.64|0.39|73|dynamic|
14 November 2012 04:51:05 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.659542

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:07 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|29|29|1.753594179|mops|mopspersec|6927577872|387764843||26.213|6.68|0.47|87|dynamic|
14 November 2012 04:51:07 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.494701

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:08 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|30|30|1.583281814|mops|mopspersec|6910962495|387662271||25.053|6.69|0.39|76|dynamic|
14 November 2012 04:51:08 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.484142

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:10 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|31|31|1.579135755|mops|mopspersec|6930762967|388514510||26.016|6.60|0.35|81|dynamic|
14 November 2012 04:51:10 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.545360

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:12 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|32|32|1.639095189|mops|mopspersec|6923479907|388522865||24.295|6.83|0.43|91|dynamic|
14 November 2012 04:51:12 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        2.491932

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:15 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|1|1|3.586918092|mops|mopspersec|6920485533|385825615||13.078|6.65|0.81|1|guided,4|
14 November 2012 04:51:15 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        1.297783

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:18 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|2|2|2.388243476|mops|mopspersec|6972502364|403664791||13.138|6.63|0.79|1|guided,4|
14 November 2012 04:51:18 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.877590

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:20 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|3|3|1.968250812|mops|mopspersec|7052440449|423246649||13.210|6.62|0.78|2|guided,4|
14 November 2012 04:51:20 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.653895

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:22 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|4|4|1.741105984|mops|mopspersec|7114464017|438486378||13.182|6.60|0.78|4|guided,4|
14 November 2012 04:51:22 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.529052

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:23 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|5|5|1.622028449|mops|mopspersec|7199870600|460473816||13.284|6.61|0.77|5|guided,4|
14 November 2012 04:51:23 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.452825

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:25 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|6|6|1.545675919|mops|mopspersec|7363868699|512219124||13.325|6.51|0.76|5|guided,4|
14 November 2012 04:51:25 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.567539

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:26 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|7|7|1.661824564|mops|mopspersec|8142960363|737274301||13.584|6.36|0.67|7|guided,4|
14 November 2012 04:51:27 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.374240

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:28 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|8|8|1.463187706|mops|mopspersec|7402858162|522715160||13.502|6.50|0.70|10|guided,4|
14 November 2012 04:51:28 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.451384

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:30 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|9|9|1.555051951|mops|mopspersec|8522147123|839529409||13.501|6.25|0.67|8|guided,4|
14 November 2012 04:51:30 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.446674

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:31 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|10|10|1.554534690|mops|mopspersec|8641286262|880116052||13.976|6.16|0.59|9|guided,4|
14 November 2012 04:51:31 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.386235

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:33 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|11|11|1.474691170|mops|mopspersec|8335435321|795249597||13.907|6.26|0.60|10|guided,4|
14 November 2012 04:51:33 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.357418

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:34 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|12|12|1.445773476|mops|mopspersec|8146275953|736730930||14.464|6.28|0.58|12|guided,4|
14 November 2012 04:51:34 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.377709

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:36 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|13|13|1.487388566|mops|mopspersec|8245802827|759867964||14.904|6.33|0.51|12|guided,4|
14 November 2012 04:51:36 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.351008

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:37 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|14|14|1.464622203|mops|mopspersec|7994435424|695699824||15.052|6.34|0.49|13|guided,4|
14 November 2012 04:51:37 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.341835

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:39 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|15|15|1.441797382|mops|mopspersec|8442399419|820287458||14.894|6.23|0.52|16|guided,4|
14 November 2012 04:51:39 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.305172

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:40 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|16|16|1.413129263|mops|mopspersec|7914314824|675234536||15.715|6.40|0.48|15|guided,4|
14 November 2012 04:51:40 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.401239

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:42 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|17|17|1.491167996|mops|mopspersec|6905324798|387049180||15.104|6.64|0.56|34|guided,4|
14 November 2012 04:51:42 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.396722

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:43 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|18|18|1.487832815|mops|mopspersec|6927283175|386490095||14.676|6.64|0.62|37|guided,4|
14 November 2012 04:51:43 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.408804

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:45 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|19|19|1.504288617|mops|mopspersec|6916418738|387465644||14.400|6.67|0.65|55|guided,4|
14 November 2012 04:51:45 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.366205

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:46 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|20|20|1.455611151|mops|mopspersec|6901183103|387691381||15.930|6.64|0.54|45|guided,4|
14 November 2012 04:51:46 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.356435

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:48 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|21|21|1.446081894|mops|mopspersec|6898495597|386371967||15.873|6.59|0.53|54|guided,4|
14 November 2012 04:51:48 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.368046

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:49 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|22|22|1.458853275|mops|mopspersec|6927634847|387091958||15.790|6.65|0.59|47|guided,4|
14 November 2012 04:51:49 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.420143

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:51 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|23|23|1.521048610|mops|mopspersec|6915957274|385874641||16.103|6.62|0.56|62|guided,4|
14 November 2012 04:51:51 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.371050

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:52 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|24|24|1.463391927|mops|mopspersec|6916891993|386924723||15.402|6.61|0.62|48|guided,4|
14 November 2012 04:51:52 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.344190

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:54 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|25|25|1.440208480|mops|mopspersec|6926611177|386848510||16.124|6.66|0.56|67|guided,4|
14 November 2012 04:51:54 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.372476

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:55 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|26|26|1.466911307|mops|mopspersec|6905570327|386710577||15.999|6.64|0.55|70|guided,4|
14 November 2012 04:51:55 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.456829

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:57 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|27|27|1.556540029|mops|mopspersec|6890638855|385663779||16.103|6.63|0.59|69|guided,4|
14 November 2012 04:51:57 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.403189

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:51:59 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|28|28|1.498368157|mops|mopspersec|6903688225|387695761||16.013|6.68|0.62|60|guided,4|
14 November 2012 04:51:59 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.335709

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:52:00 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|29|29|1.438633233|mops|mopspersec|6912702764|387653772||17.165|6.65|0.53|87|guided,4|
14 November 2012 04:52:00 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.341213

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:52:02 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|30|30|1.435228599|mops|mopspersec|6922208858|386082459||16.826|6.59|0.51|71|guided,4|
14 November 2012 04:52:02 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.340017

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:52:03 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|31|31|1.438980481|mops|mopspersec|6910984497|386275310||17.025|6.61|0.51|80|guided,4|
14 November 2012 04:52:03 PM

MXV_OPENMP:
  C/OpenMP version
  Compute matrix vector products y = A*x.

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Guided
  Chunk Size =                     4

  Algorithm                  M         N      Seconds
  MXV_PLAIN_OPENMP      10000     10000        0.342470

MXV_OPENMP:
  Normal end of execution.

14 November 2012 04:52:05 PM
stat_id|suite| Performance counter stats for './mxv_openmp':|class|32|32|1.434395202|mops|mopspersec|6903914953|386036154||16.734|6.61|0.53|80|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       45.906649

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|1|1|45.907673463|mops|mopspersec|119163167411|29795632871||9.920|0.00|1.09|0|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       45.917928

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|2|2|45.919052404|mops|mopspersec|119348606150|29844305472||52.430|0.00|1.09|1|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       23.047733

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|3|3|23.048937628|mops|mopspersec|119353958203|29849713162||60.058|0.01|1.08|7|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       23.059950

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|4|4|23.061204192|mops|mopspersec|119632784526|29919402952||26.223|0.01|1.08|6|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       11.611378

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|5|5|11.612602752|mops|mopspersec|119675582629|29963209759||35.528|0.01|1.08|17|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       23.049899

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|6|6|23.051304496|mops|mopspersec|119830357331|29968350258||31.218|0.01|1.08|13|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       10.071044

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|7|7|10.072339655|mops|mopspersec|120066200342|30043464159||32.165|0.01|0.95|24|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       11.548895

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|8|8|11.550155555|mops|mopspersec|119956534187|30014313004||25.075|0.01|1.08|12|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        9.383661

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|9|9|9.384983066|mops|mopspersec|120363754576|30127710701||33.217|0.01|0.99|18|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       12.413730

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|10|10|12.415038601|mops|mopspersec|120609933206|30198848618||35.969|0.01|1.03|26|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.761519

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|11|11|7.762967665|mops|mopspersec|120555207719|30175899871||25.559|0.01|0.76|33|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       11.526009

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|12|12|11.527184444|mops|mopspersec|120493656871|30167927206||34.399|0.01|1.07|24|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.635106

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|13|13|7.636766290|mops|mopspersec|120478364762|30159274346||19.455|0.02|0.63|13|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       11.017518

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|14|14|11.019076867|mops|mopspersec|121075354365|30322287073||35.574|0.01|0.90|23|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        9.722002

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|15|15|9.723571048|mops|mopspersec|121414802474|30424567441||27.885|0.01|0.83|22|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       10.002624

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|16|16|10.004181621|mops|mopspersec|121522788144|30446271961||31.099|0.02|0.69|26|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.137089

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|17|17|6.138441605|mops|mopspersec|119329031549|29819683014||19.795|0.02|0.61|49|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       11.716776

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|18|18|11.718440972|mops|mopspersec|119224350921|29802536328||29.997|0.01|0.85|45|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.555351

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|19|19|6.557010497|mops|mopspersec|119305329807|29824035032||16.102|0.02|0.59|111|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        8.187741

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|20|20|8.189408793|mops|mopspersec|119210939954|29801041419||25.947|0.01|0.94|61|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.579915

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|21|21|7.581477716|mops|mopspersec|119358075607|29820510023||23.693|0.02|0.63|71|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.898481

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|22|22|7.900241569|mops|mopspersec|119260726028|29816132493||26.018|0.01|0.76|67|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.894518

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|23|23|5.896491951|mops|mopspersec|119306598677|29824353103||15.853|0.02|0.59|228|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.887045

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|24|24|7.888790482|mops|mopspersec|119197759855|29801925758||28.893|0.01|0.91|81|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.287218

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|25|25|6.288872790|mops|mopspersec|119320326710|29821174582||16.969|0.02|0.57|210|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.191653

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|26|26|7.193534177|mops|mopspersec|119285184974|29814471941||23.575|0.02|0.68|85|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.195028

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|27|27|6.196850535|mops|mopspersec|119254927213|29813363695||19.972|0.02|0.63|130|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.487677

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|28|28|7.489519906|mops|mopspersec|119292201252|29813499229||21.064|0.02|0.65|86|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.011907

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|29|29|6.013767665|mops|mopspersec|119300828823|29821812917||16.630|0.02|0.60|149|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        8.936194

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|30|30|8.938208623|mops|mopspersec|119223336556|29809873886||26.442|0.01|0.86|118|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.043288

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|31|31|6.045228004|mops|mopspersec|119336056104|29825002482||15.591|0.03|0.57|263|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Static
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.816993

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|32|32|6.818852970|mops|mopspersec|119277623881|29814870699||20.135|0.02|0.67|170|static|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       45.910998

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|1|1|45.911895278|mops|mopspersec|119191835712|29801216443||14.643|0.01|1.09|2|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       23.033769

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|2|2|23.035125444|mops|mopspersec|119195673712|29795501062||34.408|0.01|1.09|16|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       15.741866

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|3|3|15.743025402|mops|mopspersec|119222442474|29795607100||13.159|0.01|1.06|6|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       13.453542

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|4|4|13.454746571|mops|mopspersec|119232103400|29802151896||20.270|0.01|0.93|6|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        9.533572

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|5|5|9.534872000|mops|mopspersec|119194978130|29798305583||39.770|0.01|1.05|16|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        9.516653

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|6|6|9.517993563|mops|mopspersec|119243452449|29804485423||36.859|0.01|0.88|20|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.748460

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|7|7|7.749547041|mops|mopspersec|119218946642|29803120503||29.719|0.01|0.92|18|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.806361

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|8|8|6.807732474|mops|mopspersec|119226012602|29803748411||27.291|0.01|0.92|27|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.573155

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|9|9|6.574560055|mops|mopspersec|119267402309|29812298381||34.685|0.01|0.85|19|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.800661

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|10|10|6.802163156|mops|mopspersec|119298754848|29821572348||27.702|0.02|0.74|28|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.525356

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|11|11|6.526624231|mops|mopspersec|119307017506|29818866278||26.418|0.02|0.70|19|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.469478

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|12|12|6.470908730|mops|mopspersec|119309967529|29825258660||25.471|0.02|0.65|27|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.202831

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|13|13|6.204328352|mops|mopspersec|119327220464|29833240323||25.491|0.02|0.62|17|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.714844

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|14|14|5.715959303|mops|mopspersec|119356308290|29823838608||23.539|0.02|0.63|14|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.709166

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|15|15|5.710123538|mops|mopspersec|119377149284|29835291605||21.373|0.02|0.59|15|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.704537

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|16|16|5.705654210|mops|mopspersec|119424399097|29833193636||24.591|0.03|0.55|15|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.235655

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|17|17|6.236894458|mops|mopspersec|119286967261|29814023605||17.872|0.02|0.64|131|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.714458

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|18|18|5.715802945|mops|mopspersec|119291463367|29823562996||18.354|0.02|0.59|158|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.737661

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|19|19|5.739281754|mops|mopspersec|119291642472|29821529442||19.889|0.02|0.60|154|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.905703

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|20|20|5.907505417|mops|mopspersec|119308543561|29818148683||19.929|0.02|0.60|166|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.712405

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|21|21|5.714052535|mops|mopspersec|119294216286|29818917327||20.433|0.02|0.59|257|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.712580

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|22|22|5.714361525|mops|mopspersec|119309734477|29825079906||19.187|0.02|0.59|259|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.218981

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|23|23|6.220778977|mops|mopspersec|119310586741|29810802302||20.306|0.02|0.58|88|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.714071

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|24|24|5.715741090|mops|mopspersec|119292400284|29819157012||18.183|0.02|0.59|280|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.479475

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|25|25|6.480801504|mops|mopspersec|119324024064|29825203551||16.336|0.03|0.56|229|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.183250

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|26|26|6.184820756|mops|mopspersec|119307875999|29819377215||18.967|0.02|0.63|172|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.712894

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|27|27|5.714442654|mops|mopspersec|119300394006|29821619672||17.444|0.02|0.59|317|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.713511

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|28|28|5.715193549|mops|mopspersec|119301685484|29824033500||17.700|0.02|0.59|268|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.708328

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|29|29|5.710244286|mops|mopspersec|119326623226|29823141810||17.591|0.03|0.56|235|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.964869

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|30|30|5.966687248|mops|mopspersec|119300247850|29822161957||17.622|0.02|0.59|203|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.713431

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|31|31|5.715222383|mops|mopspersec|119311098613|29823392794||17.753|0.02|0.59|332|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Dynamic
  Chunk Size =                     1

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.716287

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|32|32|5.717952531|mops|mopspersec|119279310854|29820266525||17.686|0.02|0.59|320|dynamic|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              1
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       45.902513

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|1|1|45.903547581|mops|mopspersec|119166344689|29795190184||8.486|0.00|1.09|0|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              2
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       23.033647

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|2|2|23.034861487|mops|mopspersec|119188936489|29799714890||34.464|0.01|1.09|8|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              3
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       15.382271

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|3|3|15.383443493|mops|mopspersec|119154599990|29800123520||28.504|0.01|1.08|5|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              4
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       11.539181

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|4|4|11.540488549|mops|mopspersec|119087451222|29816808948||37.652|0.01|1.08|11|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              5
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538       10.600189

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|5|5|10.601349098|mops|mopspersec|119204896706|29802466682||36.520|0.01|0.95|16|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              6
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        8.951508

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|6|6|8.952760203|mops|mopspersec|119246326169|29808499879||33.712|0.01|0.93|26|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              7
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.895754

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|7|7|7.897145341|mops|mopspersec|120012001430|30028162361||32.246|0.01|0.91|16|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              8
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        7.033793

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|8|8|7.034930403|mops|mopspersec|119361658349|29833640333||27.215|0.01|0.89|22|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              9
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.391871

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|9|9|6.393427202|mops|mopspersec|119397291920|29854098013||28.079|0.01|0.87|34|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              10
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.464327

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|10|10|6.465760301|mops|mopspersec|119314121727|29827927483||26.168|0.01|0.78|22|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              11
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.538829

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|11|11|6.540399881|mops|mopspersec|119278982056|29812506218||23.401|0.02|0.70|23|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              12
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.341522

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|12|12|6.342730495|mops|mopspersec|119332278339|29832997498||24.337|0.02|0.66|20|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              13
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.792007

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|13|13|5.793486275|mops|mopspersec|119353976610|29828776414||22.646|0.02|0.67|15|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              14
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.718458

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|14|14|5.719830104|mops|mopspersec|119372489682|29839509223||21.157|0.02|0.63|13|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              15
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.713607

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|15|15|5.714675954|mops|mopspersec|119409877904|29838940360||21.084|0.02|0.59|18|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              16
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.707655

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|16|16|5.709179319|mops|mopspersec|119400541615|29846007739||23.660|0.02|0.55|15|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              17
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.432584

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|17|17|6.434452363|mops|mopspersec|119281702235|29812106574||19.836|0.02|0.58|154|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              18
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.307343

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|18|18|6.309139220|mops|mopspersec|119245873283|29812728216||18.445|0.02|0.63|168|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              19
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.735313

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|19|19|5.736986498|mops|mopspersec|119259507653|29815400908||18.917|0.02|0.61|169|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              20
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.723719

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|20|20|5.725499329|mops|mopspersec|119267765827|29818156373||18.574|0.02|0.61|214|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              21
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.707376

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|21|21|5.709031457|mops|mopspersec|119298897442|29820653038||16.949|0.03|0.55|281|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              22
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.749174

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|22|22|5.750895859|mops|mopspersec|119253503226|29812050637||18.459|0.02|0.62|269|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              23
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.583387

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|23|23|6.585036564|mops|mopspersec|119288721294|29814278815||17.027|0.02|0.59|137|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              24
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.720877

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|24|24|5.722547556|mops|mopspersec|119273482416|29817602606||19.053|0.02|0.59|177|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              25
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.716649

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|25|25|5.718228014|mops|mopspersec|119293446608|29813425179||15.127|0.02|0.59|181|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              26
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.715037

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|26|26|5.716708953|mops|mopspersec|119278207949|29817329780||16.976|0.02|0.59|230|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              27
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        6.210782

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|27|27|6.212563658|mops|mopspersec|119288330318|29816686260||16.694|0.02|0.59|224|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              28
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.878466

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|28|28|5.880261929|mops|mopspersec|119215439829|29806706036||18.721|0.02|0.73|74|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              29
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.723041

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|29|29|5.724757302|mops|mopspersec|119278896153|29819124606||16.542|0.03|0.56|265|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              30
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.732692

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|30|30|5.734671259|mops|mopspersec|119284119312|29816684818||15.995|0.02|0.59|210|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              31
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.717665

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|31|31|5.719191963|mops|mopspersec|119265960060|29814440332||17.314|0.02|0.59|287|guided,4|

PRIME_OPENMP
  C/OpenMP version

  Number of processors available = 16
  Number of threads =              32
  Scheduling Policy =              Guided
  Chunk Size =                     4

TEST01
  Call PRIME_NUMBER to count the primes from 1 to N.

         N        Pi          Time

    500000     41538        5.714186

PRIME_OPENMP
  Normal end of execution.
stat_id|suite| Performance counter stats for './prime_openmp':|class|32|32|5.715972217|mops|mopspersec|119280968924|29817063166||15.622|0.02|0.59|255|guided,4|
14 November 2012 05:07:49 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608481
  Error    = 7.907844e-07
  Time     = 4.378028

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:07:53 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|1|1|4.379128639|mops|mopspersec|4914908299|303252834||30.774|0.01|0.47|1|static|
14 November 2012 05:07:53 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608430
  Error    = 7.907844e-07
  Time     = 2.204858

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:07:55 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|2|2|2.206074162|mops|mopspersec|4936541695|308988929||20.588|0.01|0.47|1|static|
14 November 2012 05:07:56 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608525
  Error    = 7.907844e-07
  Time     = 1.475811

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:07:57 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|3|3|1.477174929|mops|mopspersec|4949664651|311447943||36.881|0.01|0.47|5|static|
14 November 2012 05:07:57 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608545
  Error    = 7.907844e-07
  Time     = 1.106395

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:07:58 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|4|4|1.107792945|mops|mopspersec|4941937935|312727877||31.909|0.01|0.47|4|static|
14 November 2012 05:07:58 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608340
  Error    = 7.907844e-07
  Time     = 0.879951

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:07:59 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|5|5|0.881269930|mops|mopspersec|4925846932|306002132||28.146|0.01|0.47|5|static|
14 November 2012 05:07:59 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608394
  Error    = 7.907844e-07
  Time     = 0.743425

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:00 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|6|6|0.745073595|mops|mopspersec|4969631574|318827083||22.540|0.01|0.47|7|static|
14 November 2012 05:08:00 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608712
  Error    = 7.907844e-07
  Time     = 0.629084

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:01 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|7|7|0.630321341|mops|mopspersec|4924406319|304818373||24.434|0.01|0.47|7|static|
14 November 2012 05:08:01 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608779
  Error    = 7.907844e-07
  Time     = 0.565427

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:01 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|8|8|0.566798339|mops|mopspersec|5002943325|324567621||21.962|0.02|0.47|10|static|
14 November 2012 05:08:01 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608704
  Error    = 7.907844e-07
  Time     = 0.505943

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:02 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|9|9|0.507503179|mops|mopspersec|4994580097|328648197||19.412|0.02|0.46|9|static|
14 November 2012 05:08:02 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608011
  Error    = 7.907843e-07
  Time     = 0.455326

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:02 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|10|10|0.456871642|mops|mopspersec|5022902551|332220275||22.849|0.02|0.47|12|static|
14 November 2012 05:08:02 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608100
  Error    = 7.907844e-07
  Time     = 0.418878

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:03 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|11|11|0.420034212|mops|mopspersec|4996950537|331658937||19.698|0.02|0.46|10|static|
14 November 2012 05:08:03 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607656
  Error    = 7.907843e-07
  Time     = 0.380914

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:03 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|12|12|0.382399086|mops|mopspersec|4989157846|319155191||22.691|0.02|0.46|11|static|
14 November 2012 05:08:03 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607594
  Error    = 7.907843e-07
  Time     = 0.358593

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:04 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|13|13|0.359929769|mops|mopspersec|5047589244|338420946||21.604|0.03|0.46|16|static|
14 November 2012 05:08:04 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607771
  Error    = 7.907843e-07
  Time     = 0.324738

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:04 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|14|14|0.326336805|mops|mopspersec|4961230486|313913634||21.809|0.02|0.46|13|static|
14 November 2012 05:08:04 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607791
  Error    = 7.907843e-07
  Time     = 0.304284

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:04 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|15|15|0.305904468|mops|mopspersec|4982528761|327600449||20.905|0.03|0.46|14|static|
14 November 2012 05:08:04 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607904
  Error    = 7.907843e-07
  Time     = 0.285881

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:05 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|16|16|0.287627984|mops|mopspersec|4932534028|309043516||18.309|0.03|0.46|15|static|
14 November 2012 05:08:05 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607782
  Error    = 7.907843e-07
  Time     = 0.464160

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:05 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|17|17|0.465812366|mops|mopspersec|4909572176|303463576||18.974|0.02|0.46|44|static|
14 November 2012 05:08:05 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607548
  Error    = 7.907843e-07
  Time     = 0.521191

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:06 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|18|18|0.523204450|mops|mopspersec|4915302359|303636701||21.819|0.02|0.47|34|static|
14 November 2012 05:08:06 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607758
  Error    = 7.907843e-07
  Time     = 0.373058

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:06 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|19|19|0.374420343|mops|mopspersec|4913522306|303851372||18.791|0.03|0.46|46|static|
14 November 2012 05:08:06 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607907
  Error    = 7.907843e-07
  Time     = 0.357027

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:06 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|20|20|0.358812849|mops|mopspersec|4905978221|303246550||19.361|0.03|0.46|43|static|
14 November 2012 05:08:07 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607983
  Error    = 7.907843e-07
  Time     = 0.521095

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:07 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|21|21|0.522741886|mops|mopspersec|4905898275|303403255||23.935|0.02|0.46|59|static|
14 November 2012 05:08:07 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608105
  Error    = 7.907844e-07
  Time     = 0.410281

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:08 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|22|22|0.412096359|mops|mopspersec|4900809332|303205947||18.718|0.02|0.46|46|static|
14 November 2012 05:08:08 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607998
  Error    = 7.907843e-07
  Time     = 0.391444

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:08 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|23|23|0.393210268|mops|mopspersec|4905113068|303344763||19.848|0.03|0.46|66|static|
14 November 2012 05:08:08 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607958
  Error    = 7.907843e-07
  Time     = 0.434364

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:08 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|24|24|0.436454531|mops|mopspersec|4912169728|303473354||24.047|0.02|0.46|62|static|
14 November 2012 05:08:09 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607894
  Error    = 7.907843e-07
  Time     = 0.388760

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:09 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|25|25|0.390217086|mops|mopspersec|4882674781|302672195||9.197|0.03|0.46|52|static|
14 November 2012 05:08:09 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607809
  Error    = 7.907843e-07
  Time     = 0.392563

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:09 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|26|26|0.394702171|mops|mopspersec|4911935050|303845190||22.158|0.02|0.46|78|static|
14 November 2012 05:08:09 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607842
  Error    = 7.907843e-07
  Time     = 0.405479

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:10 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|27|27|0.407378147|mops|mopspersec|4913838487|303842011||21.988|0.03|0.46|56|static|
14 November 2012 05:08:10 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607620
  Error    = 7.907843e-07
  Time     = 0.488551

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:10 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|28|28|0.490378112|mops|mopspersec|4896389739|303166500||24.161|0.02|0.47|94|static|
14 November 2012 05:08:10 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607771
  Error    = 7.907843e-07
  Time     = 0.467838

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:11 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|29|29|0.469600553|mops|mopspersec|4896153273|303473032||20.998|0.02|0.46|87|static|
14 November 2012 05:08:11 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607690
  Error    = 7.907843e-07
  Time     = 0.531837

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:11 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|30|30|0.533806233|mops|mopspersec|4908225437|303822535||24.106|0.02|0.47|97|static|
14 November 2012 05:08:11 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607608
  Error    = 7.907843e-07
  Time     = 0.359763

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:12 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|31|31|0.361769480|mops|mopspersec|4908897031|303746190||23.542|0.03|0.46|80|static|
14 November 2012 05:08:12 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607593
  Error    = 7.907843e-07
  Time     = 0.343335

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:12 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|32|32|0.345285358|mops|mopspersec|4914585996|303909394||21.801|0.03|0.46|82|static|
14 November 2012 05:08:12 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608481
  Error    = 7.907844e-07
  Time     = 4.376895

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:17 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|1|1|4.378013213|mops|mopspersec|4916028909|303284648||25.262|0.01|0.47|0|dynamic|
14 November 2012 05:08:17 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608430
  Error    = 7.907844e-07
  Time     = 2.192180

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:19 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|2|2|2.193516469|mops|mopspersec|4917109473|303579372||52.593|0.01|0.47|2|dynamic|
14 November 2012 05:08:19 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608525
  Error    = 7.907844e-07
  Time     = 1.469120

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:20 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|3|3|1.470442853|mops|mopspersec|4930108806|306605201||36.105|0.01|0.47|7|dynamic|
14 November 2012 05:08:20 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608544
  Error    = 7.907844e-07
  Time     = 1.117303

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:22 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|4|4|1.118609694|mops|mopspersec|4982798725|321587176||32.144|0.01|0.47|4|dynamic|
14 November 2012 05:08:22 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608340
  Error    = 7.907844e-07
  Time     = 0.901895

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:23 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|5|5|0.903346640|mops|mopspersec|5005114950|327272232||13.979|0.02|0.47|5|dynamic|
14 November 2012 05:08:23 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608394
  Error    = 7.907844e-07
  Time     = 0.756570

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:23 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|6|6|0.758083134|mops|mopspersec|5033909578|334367570||26.999|0.02|0.47|5|dynamic|
14 November 2012 05:08:23 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608711
  Error    = 7.907844e-07
  Time     = 0.630237

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:24 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|7|7|0.631618270|mops|mopspersec|4927378750|306399625||22.792|0.01|0.47|10|dynamic|
14 November 2012 05:08:24 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608779
  Error    = 7.907844e-07
  Time     = 0.552371

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:25 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|8|8|0.553674897|mops|mopspersec|4942687333|312448363||19.611|0.01|0.47|9|dynamic|
14 November 2012 05:08:25 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608704
  Error    = 7.907844e-07
  Time     = 0.503278

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:25 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|9|9|0.504522318|mops|mopspersec|5013542955|330617178||21.103|0.02|0.47|8|dynamic|
14 November 2012 05:08:25 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608011
  Error    = 7.907843e-07
  Time     = 0.457738

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:26 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|10|10|0.459192450|mops|mopspersec|5042552539|343458471||17.828|0.02|0.47|9|dynamic|
14 November 2012 05:08:26 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608100
  Error    = 7.907844e-07
  Time     = 0.415321

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:26 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|11|11|0.416748799|mops|mopspersec|5015209191|331746679||19.347|0.02|0.47|10|dynamic|
14 November 2012 05:08:26 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607656
  Error    = 7.907843e-07
  Time     = 0.379319

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:27 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|12|12|0.380943099|mops|mopspersec|4966797920|323184951||20.872|0.02|0.46|11|dynamic|
14 November 2012 05:08:27 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607594
  Error    = 7.907843e-07
  Time     = 0.351760

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:27 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|13|13|0.353020287|mops|mopspersec|4987827298|324837212||16.283|0.02|0.46|12|dynamic|
14 November 2012 05:08:27 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607771
  Error    = 7.907843e-07
  Time     = 0.325168

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:27 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|14|14|0.326486610|mops|mopspersec|4964716637|313829977||22.421|0.03|0.46|13|dynamic|
14 November 2012 05:08:27 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607791
  Error    = 7.907843e-07
  Time     = 0.303237

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:28 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|15|15|0.305236212|mops|mopspersec|4970976061|322051013||21.399|0.03|0.46|15|dynamic|
14 November 2012 05:08:28 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607904
  Error    = 7.907843e-07
  Time     = 0.285781

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:28 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|16|16|0.286978090|mops|mopspersec|4930784934|309281617||18.997|0.03|0.46|15|dynamic|
14 November 2012 05:08:28 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607782
  Error    = 7.907843e-07
  Time     = 0.444992

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:29 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|17|17|0.446768218|mops|mopspersec|4909363834|303250315||22.491|0.02|0.46|34|dynamic|
14 November 2012 05:08:29 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607548
  Error    = 7.907843e-07
  Time     = 0.383466

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:29 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|18|18|0.385312869|mops|mopspersec|4899765429|303089878||19.189|0.03|0.46|33|dynamic|
14 November 2012 05:08:29 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607758
  Error    = 7.907843e-07
  Time     = 0.368466

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:29 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|19|19|0.370364621|mops|mopspersec|4912524421|303667692||21.258|0.03|0.46|37|dynamic|
14 November 2012 05:08:29 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607907
  Error    = 7.907843e-07
  Time     = 0.367145

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:30 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|20|20|0.369153614|mops|mopspersec|4905814041|303356424||21.942|0.03|0.46|53|dynamic|
14 November 2012 05:08:30 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607983
  Error    = 7.907843e-07
  Time     = 0.497092

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:30 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|21|21|0.498823529|mops|mopspersec|4904923689|303405189||20.921|0.02|0.46|45|dynamic|
14 November 2012 05:08:30 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608105
  Error    = 7.907844e-07
  Time     = 0.379296

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:31 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|22|22|0.380830361|mops|mopspersec|4895489666|303292725||19.879|0.02|0.46|53|dynamic|
14 November 2012 05:08:31 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608000
  Error    = 7.907843e-07
  Time     = 0.419589

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:31 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|23|23|0.421569241|mops|mopspersec|4912738545|303793390||22.056|0.02|0.46|61|dynamic|
14 November 2012 05:08:31 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607958
  Error    = 7.907843e-07
  Time     = 0.398176

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:32 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|24|24|0.399961849|mops|mopspersec|4910208322|303792039||20.496|0.03|0.46|56|dynamic|
14 November 2012 05:08:32 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607894
  Error    = 7.907843e-07
  Time     = 0.373731

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:32 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|25|25|0.375509164|mops|mopspersec|4904937678|303463649||21.879|0.03|0.46|67|dynamic|
14 November 2012 05:08:32 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607807
  Error    = 7.907843e-07
  Time     = 0.421421

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:33 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|26|26|0.423479545|mops|mopspersec|4918286259|304136672||20.859|0.03|0.46|75|dynamic|
14 November 2012 05:08:33 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607842
  Error    = 7.907843e-07
  Time     = 0.388000

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:33 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|27|27|0.389877694|mops|mopspersec|4918411731|303988180||22.228|0.02|0.46|74|dynamic|
14 November 2012 05:08:33 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607620
  Error    = 7.907843e-07
  Time     = 0.382178

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:33 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|28|28|0.384140652|mops|mopspersec|4901380673|303660850||20.267|0.02|0.46|72|dynamic|
14 November 2012 05:08:34 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607771
  Error    = 7.907843e-07
  Time     = 0.458584

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:34 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|29|29|0.460424671|mops|mopspersec|4906632940|303593371||24.561|0.03|0.46|83|dynamic|
14 November 2012 05:08:34 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607690
  Error    = 7.907843e-07
  Time     = 0.377499

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:34 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|30|30|0.379545496|mops|mopspersec|4908999922|303958606||21.480|0.03|0.46|83|dynamic|
14 November 2012 05:08:34 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607608
  Error    = 7.907843e-07
  Time     = 0.396362

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:35 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|31|31|0.398395926|mops|mopspersec|4904712190|304058040||21.122|0.03|0.46|90|dynamic|
14 November 2012 05:08:35 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607593
  Error    = 7.907843e-07
  Time     = 0.334710

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:35 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|32|32|0.336668422|mops|mopspersec|4899610275|303833589||22.095|0.03|0.46|83|dynamic|
14 November 2012 05:08:35 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608481
  Error    = 7.907844e-07
  Time     = 4.378333

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:40 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|1|1|4.379369017|mops|mopspersec|4913815646|303169031||8.004|0.01|0.47|0|guided,4|
14 November 2012 05:08:40 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608430
  Error    = 7.907844e-07
  Time     = 2.193309

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:42 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|2|2|2.194576482|mops|mopspersec|4918134216|304898464||54.296|0.01|0.47|1|guided,4|
14 November 2012 05:08:42 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608525
  Error    = 7.907844e-07
  Time     = 1.463493

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:43 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|3|3|1.464814974|mops|mopspersec|4923306576|305476837||36.382|0.01|0.47|2|guided,4|
14 November 2012 05:08:43 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608544
  Error    = 7.907844e-07
  Time     = 1.098666

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:45 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|4|4|1.099947267|mops|mopspersec|4913542542|303674572||28.836|0.01|0.47|3|guided,4|
14 November 2012 05:08:45 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608339
  Error    = 7.907844e-07
  Time     = 0.880957

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:46 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|5|5|0.882165270|mops|mopspersec|4930500197|309427361||25.567|0.01|0.47|8|guided,4|
14 November 2012 05:08:46 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608394
  Error    = 7.907844e-07
  Time     = 0.734322

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:46 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|6|6|0.735608574|mops|mopspersec|4934002813|307427593||27.304|0.01|0.47|5|guided,4|
14 November 2012 05:08:46 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608712
  Error    = 7.907844e-07
  Time     = 0.629999

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:47 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|7|7|0.631264213|mops|mopspersec|4925299065|305635935||25.086|0.01|0.47|8|guided,4|
14 November 2012 05:08:47 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608779
  Error    = 7.907844e-07
  Time     = 0.552795

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:48 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|8|8|0.554087422|mops|mopspersec|4930620788|312012136||20.773|0.01|0.47|9|guided,4|
14 November 2012 05:08:48 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608704
  Error    = 7.907844e-07
  Time     = 0.501754

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:48 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|9|9|0.503026117|mops|mopspersec|5032705683|335699017||20.347|0.02|0.47|10|guided,4|
14 November 2012 05:08:48 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608011
  Error    = 7.907843e-07
  Time     = 0.455106

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:49 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|10|10|0.456598796|mops|mopspersec|5031843081|334433100||18.117|0.02|0.47|10|guided,4|
14 November 2012 05:08:49 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608100
  Error    = 7.907844e-07
  Time     = 0.415964

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:49 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|11|11|0.417541111|mops|mopspersec|4988264830|323688894||13.784|0.02|0.46|11|guided,4|
14 November 2012 05:08:49 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607656
  Error    = 7.907843e-07
  Time     = 0.382088

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:50 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|12|12|0.383623691|mops|mopspersec|5031741922|332033131||19.364|0.02|0.46|11|guided,4|
14 November 2012 05:08:50 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607594
  Error    = 7.907843e-07
  Time     = 0.355576

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:50 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|13|13|0.357181926|mops|mopspersec|4986973737|326991483||21.457|0.03|0.46|12|guided,4|
14 November 2012 05:08:50 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607771
  Error    = 7.907843e-07
  Time     = 0.324744

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:50 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|14|14|0.325972003|mops|mopspersec|4954732445|311805027||21.854|0.02|0.46|13|guided,4|
14 November 2012 05:08:50 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607791
  Error    = 7.907843e-07
  Time     = 0.302555

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:51 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|15|15|0.303815291|mops|mopspersec|4955263981|313564768||21.781|0.03|0.46|15|guided,4|
14 November 2012 05:08:51 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607904
  Error    = 7.907843e-07
  Time     = 0.284404

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:51 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|16|16|0.285656765|mops|mopspersec|4939519875|305881650||19.837|0.03|0.46|15|guided,4|
14 November 2012 05:08:51 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607782
  Error    = 7.907843e-07
  Time     = 0.399235

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:51 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|17|17|0.400749960|mops|mopspersec|4901066482|303249627||18.364|0.02|0.46|33|guided,4|
14 November 2012 05:08:51 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607548
  Error    = 7.907843e-07
  Time     = 0.389080

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:52 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|18|18|0.390782071|mops|mopspersec|4909574486|303639982||17.738|0.03|0.46|25|guided,4|
14 November 2012 05:08:52 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607758
  Error    = 7.907843e-07
  Time     = 0.383576

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:52 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|19|19|0.385396214|mops|mopspersec|4913963606|303771635||18.384|0.02|0.46|36|guided,4|
14 November 2012 05:08:52 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607907
  Error    = 7.907843e-07
  Time     = 0.460126

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:53 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|20|20|0.461688778|mops|mopspersec|4909495166|303373441||18.249|0.02|0.46|52|guided,4|
14 November 2012 05:08:53 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607983
  Error    = 7.907843e-07
  Time     = 0.376861

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:53 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|21|21|0.378804431|mops|mopspersec|4904143671|303291110||20.770|0.02|0.46|56|guided,4|
14 November 2012 05:08:53 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718608105
  Error    = 7.907844e-07
  Time     = 0.376267

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:54 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|22|22|0.378316934|mops|mopspersec|4913395338|303939282||18.655|0.03|0.46|49|guided,4|
14 November 2012 05:08:54 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607998
  Error    = 7.907843e-07
  Time     = 0.390598

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:54 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|23|23|0.392506053|mops|mopspersec|4907703050|303747622||20.814|0.02|0.46|55|guided,4|
14 November 2012 05:08:54 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607958
  Error    = 7.907843e-07
  Time     = 0.345450

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:54 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|24|24|0.347279268|mops|mopspersec|4906165488|303488685||20.670|0.03|0.46|53|guided,4|
14 November 2012 05:08:55 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607894
  Error    = 7.907843e-07
  Time     = 0.410530

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:55 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|25|25|0.412593274|mops|mopspersec|4910058762|303598971||19.284|0.03|0.46|64|guided,4|
14 November 2012 05:08:55 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607807
  Error    = 7.907843e-07
  Time     = 0.385507

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:55 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|26|26|0.387471169|mops|mopspersec|4906791778|303598517||22.235|0.03|0.46|54|guided,4|
14 November 2012 05:08:55 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607842
  Error    = 7.907843e-07
  Time     = 0.372207

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:56 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|27|27|0.374169850|mops|mopspersec|4900108889|303355851||21.311|0.03|0.46|68|guided,4|
14 November 2012 05:08:56 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607620
  Error    = 7.907843e-07
  Time     = 0.379741

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:56 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|28|28|0.381679001|mops|mopspersec|4902286966|303523343||19.642|0.03|0.46|70|guided,4|
14 November 2012 05:08:56 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607771
  Error    = 7.907843e-07
  Time     = 0.480986

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:57 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|29|29|0.483131295|mops|mopspersec|4901000369|303542578||25.812|0.02|0.46|99|guided,4|
14 November 2012 05:08:57 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607690
  Error    = 7.907843e-07
  Time     = 0.533125

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:57 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|30|30|0.534637628|mops|mopspersec|4896906282|303503120||25.963|0.02|0.47|83|guided,4|
14 November 2012 05:08:57 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607608
  Error    = 7.907843e-07
  Time     = 0.424704

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:58 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|31|31|0.426710801|mops|mopspersec|4904519599|303887215||22.502|0.03|0.46|74|guided,4|
14 November 2012 05:08:58 PM

QUAD_OPENMP:
  C version
  Use OpenMP for parallel execution.
  Estimate the integral of f(x) from A to B.
  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).

  A        = 0.000000
  B        = 10.000000
  N        = 100000000
  Exact    =       0.4993633810764567

  Estimate =       0.4993641718607593
  Error    = 7.907843e-07
  Time     = 0.360189

QUAD_OPENMP:
  Normal end of execution.

14 November 2012 05:08:58 PM
stat_id|suite| Performance counter stats for './quad_openmp':|class|32|32|0.362015126|mops|mopspersec|4906805236|303960236||21.548|0.03|0.46|97|guided,4|
14 November 2012 05:08:58 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              1

  Thread   Seed  I   X(I)

       0     123456789

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:58 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|1|1|0.163619286|mops|mopspersec|543690203|38223554||96.169|0.75|1.43|0|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              2

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|2|2|0.093729397|mops|mopspersec|570370697|41950866||94.434|0.79|1.36|1|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              3

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|3|3|0.065118973|mops|mopspersec|564538284|43149546||87.412|0.81|1.36|2|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              4

  Thread   Seed  I   X(I)

       0     123456789
       3     123456792
       2     123456791
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|4|4|0.051958434|mops|mopspersec|556918924|46289568||89.639|0.80|1.23|3|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              5

  Thread   Seed  I   X(I)

       0     123456789
       3     123456792
       2     123456791
       1     123456790
       4     123456793

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|5|5|0.047802347|mops|mopspersec|602928389|53621611||87.761|0.82|1.16|4|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              6

  Thread   Seed  I   X(I)

       0     123456789
       3     123456792
       5     123456794
       4     123456793
       1     123456790
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|6|6|0.038820400|mops|mopspersec|605393191|53638141||88.388|0.82|1.22|5|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              7

  Thread   Seed  I   X(I)

       0     123456789
       4     123456793
       6     123456795
       5     123456794
       3     123456792
       2     123456791
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|7|7|0.035995868|mops|mopspersec|576536506|54841310||89.170|0.81|1.14|6|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              8

  Thread   Seed  I   X(I)

       6     123456795
       5     123456794
       0     123456789
       4     123456793
       7     123456796
       2     123456791
       1     123456790
       3     123456792

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|8|8|0.032233906|mops|mopspersec|635199375|60257835||84.873|0.84|1.16|8|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              9

  Thread   Seed  I   X(I)

       8     123456797
       5     123456794
       2     123456791
       4     123456793
       0     123456789
       3     123456792
       6     123456795
       1     123456790
       7     123456796

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|9|9|0.039324115|mops|mopspersec|713074427|84735972||84.986|0.83|0.92|8|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              10

  Thread   Seed  I   X(I)

       8     123456797
       0     123456789
       1     123456790
       5     123456794
       3     123456792
       9     123456798
       7     123456796
       2     123456791
       4     123456793
       6     123456795

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|10|10|0.040800575|mops|mopspersec|702653622|91411625||89.137|0.74|0.86|9|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              11

  Thread   Seed  I   X(I)

       6     123456795
       1     123456790
       7     123456796
      10     123456799
       0     123456789
       4     123456793
       5     123456794
       8     123456797
       3     123456792
       9     123456798
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:08:59 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|11|11|0.038349857|mops|mopspersec|711126837|83656129||84.582|0.85|0.83|10|static|
14 November 2012 05:08:59 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              12

  Thread   Seed  I   X(I)

       0     123456789
       6     123456795
       8     123456797
       1     123456790
       4     123456793
       3     123456792
       2     123456791
       9     123456798
       7     123456796
       5     123456794
      11     123456800
      10     123456799

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|12|12|0.040204000|mops|mopspersec|729464596|90326465||81.866|0.84|0.75|14|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              13

  Thread   Seed  I   X(I)

      12     123456801
       2     123456791
       6     123456795
       7     123456796
       0     123456789
       1     123456790
      11     123456800
       3     123456792
       4     123456793
      10     123456799
       8     123456797
       9     123456798
       5     123456794

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|13|13|0.034293480|mops|mopspersec|704534035|80634853||83.282|0.88|0.80|12|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              14

  Thread   Seed  I   X(I)

       6     123456795
      13     123456802
       7     123456796
       3     123456792
       0     123456789
       8     123456797
       9     123456798
       4     123456793
      10     123456799
       1     123456790
      11     123456800
       5     123456794
      12     123456801
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|14|14|0.032762118|mops|mopspersec|686140885|79288755||82.976|0.95|0.73|14|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              15

  Thread   Seed  I   X(I)

       0     123456789
      14     123456803
       2     123456791
       5     123456794
       4     123456793
      11     123456800
      13     123456802
       3     123456792
      10     123456799
       6     123456795
       7     123456796
       9     123456798
       8     123456797
      12     123456801
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|15|15|0.031492394|mops|mopspersec|670731788|77622625||83.817|0.92|0.71|14|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              16

  Thread   Seed  I   X(I)

      15     123456804
       0     123456789
       3     123456792
      12     123456801
       4     123456793
      11     123456800
      14     123456803
      13     123456802
       2     123456791
       9     123456798
       6     123456795
      10     123456799
       7     123456796
       5     123456794
       1     123456790
       8     123456797

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|16|16|0.030651959|mops|mopspersec|668694944|77224903||87.979|0.93|0.69|15|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              17

  Thread   Seed  I   X(I)

       1     123456790
       0     123456789
       5     123456794
       2     123456791
       3     123456792
       6     123456795
       4     123456793
       7     123456796
      16     123456805
      15     123456804
      10     123456799
      11     123456800
       9     123456798
       8     123456797
      14     123456803
      12     123456801
      13     123456802

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|17|17|0.043160164|mops|mopspersec|507693268|36743362||85.881|0.94|0.90|31|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              18

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       2     123456791
       0     123456789
       4     123456793
      10     123456799
       6     123456795
      16     123456805
       3     123456792
       8     123456797
      13     123456802
       9     123456798
       7     123456796
      12     123456801
      11     123456800
      17     123456806
      15     123456804
      14     123456803

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|18|18|0.041985558|mops|mopspersec|522798595|38309625||84.069|0.93|1.02|29|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              19

  Thread   Seed  I   X(I)

       2     123456791
       1     123456790
       5     123456794
       9     123456798
       0     123456789
       3     123456792
       6     123456795
       4     123456793
      17     123456806
       7     123456796
      12     123456801
      11     123456800
      13     123456802
      10     123456799
      14     123456803
       8     123456797
      16     123456805
      18     123456807
      15     123456804

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|19|19|0.048577970|mops|mopspersec|535119376|39264007||82.359|0.90|1.15|38|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              20

  Thread   Seed  I   X(I)

       1     123456790
       9     123456798
       8     123456797
       0     123456789
       4     123456793
       2     123456791
       3     123456792
      10     123456799
      11     123456800
       5     123456794
      12     123456801
       7     123456796
      13     123456802
       6     123456795
      18     123456807
      19     123456808
      17     123456806
      14     123456803
      15     123456804
      16     123456805

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|20|20|0.040698320|mops|mopspersec|525037197|37759197||83.511|0.90|1.16|46|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              21

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      17     123456806
      13     123456802
      15     123456804
      14     123456803
       5     123456794
      18     123456807
      16     123456805
       8     123456797
      19     123456808
       3     123456792
       6     123456795
      12     123456801
      11     123456800
      10     123456799
       7     123456796
       9     123456798
      20     123456809

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|21|21|0.049871695|mops|mopspersec|534142351|38783548||81.918|0.92|1.07|59|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              22

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
       9     123456798
       3     123456792
      15     123456804
       5     123456794
      10     123456799
       7     123456796
       6     123456795
       8     123456797
      20     123456809
      19     123456808
      16     123456805
      14     123456803
      11     123456800
      18     123456807
      17     123456806
      21     123456810
      13     123456802
      12     123456801

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|22|22|0.039461329|mops|mopspersec|533316495|37906462||83.822|0.93|0.98|43|static|
14 November 2012 05:09:00 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              23

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
       3     123456792
       5     123456794
      21     123456810
      12     123456801
      13     123456802
      20     123456809
      17     123456806
      18     123456807
      11     123456800
      14     123456803
      15     123456804
      10     123456799
       6     123456795
      19     123456808
       8     123456797
      16     123456805
       7     123456796
       9     123456798
      22     123456811

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:00 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|23|23|0.041292445|mops|mopspersec|512920338|37179704||83.180|0.94|0.96|54|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              24

  Thread   Seed  I   X(I)

       1     123456790
       3     123456792
       2     123456791
       0     123456789
      12     123456801
      13     123456802
       6     123456795
       7     123456796
      11     123456800
      22     123456811
      14     123456803
      21     123456810
      15     123456804
       4     123456793
       8     123456797
      20     123456809
       5     123456794
      16     123456805
      10     123456799
      19     123456808
      18     123456807
      23     123456812
      17     123456806
       9     123456798

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|24|24|0.036678686|mops|mopspersec|539721330|39476513||83.924|0.91|1.08|56|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              25

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
      15     123456804
       5     123456794
      14     123456803
      23     123456812
       6     123456795
      10     123456799
      13     123456802
      12     123456801
      16     123456805
       3     123456792
      11     123456800
      22     123456811
       7     123456796
      17     123456806
       9     123456798
      21     123456810
      19     123456808
      18     123456807
       8     123456797
      24     123456813
      20     123456809

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|25|25|0.038578757|mops|mopspersec|533032446|37921034||82.294|0.94|0.97|48|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              26

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      15     123456804
      20     123456809
      19     123456808
       6     123456795
      22     123456811
       8     123456797
      25     123456814
      18     123456807
      14     123456803
       5     123456794
       3     123456792
      24     123456813
      17     123456806
       9     123456798
      21     123456810
      12     123456801
       7     123456796
      11     123456800
      23     123456812
      13     123456802
      10     123456799
      16     123456805

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|26|26|0.035001667|mops|mopspersec|529029600|38800033||82.869|0.96|0.98|66|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              27

  Thread   Seed  I   X(I)

       1     123456790
       9     123456798
      18     123456807
      17     123456806
      16     123456805
       6     123456795
      19     123456808
      20     123456809
      25     123456814
      21     123456810
      22     123456811
       7     123456796
      15     123456804
       8     123456797
      24     123456813
      26     123456815
       2     123456791
       4     123456793
      13     123456802
      14     123456803
       3     123456792
      23     123456812
      12     123456801
      11     123456800
       0     123456789
      10     123456799
       5     123456794

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|27|27|0.042513312|mops|mopspersec|525467519|38448485||81.931|0.93|0.93|67|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              28

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
      26     123456815
       5     123456794
      15     123456804
       6     123456795
      14     123456803
      11     123456800
      25     123456814
       3     123456792
      16     123456805
      13     123456802
      24     123456813
       7     123456796
      17     123456806
      12     123456801
       8     123456797
      27     123456816
       9     123456798
      10     123456799
      18     123456807
      19     123456808
      23     123456812
      21     123456810
      22     123456811
      20     123456809

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|28|28|0.042565307|mops|mopspersec|516512369|37261081||83.434|0.96|0.95|68|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              29

  Thread   Seed  I   X(I)

       1     123456790
       6     123456795
       0     123456789
       2     123456791
       5     123456794
       3     123456792
       7     123456796
      27     123456816
      12     123456801
       4     123456793
       8     123456797
      28     123456817
      13     123456802
       9     123456798
      11     123456800
      10     123456799
      14     123456803
      26     123456815
      15     123456804
      20     123456809
      19     123456808
      18     123456807
      21     123456810
      25     123456814
      17     123456806
      16     123456805
      22     123456811
      24     123456813
      23     123456812

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|29|29|0.042165342|mops|mopspersec|513920727|38060104||81.899|0.88|1.07|79|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              30

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      15     123456804
      28     123456817
       5     123456794
      14     123456803
      16     123456805
      27     123456816
       9     123456798
      21     123456810
       8     123456797
      13     123456802
      17     123456806
       3     123456792
      26     123456815
       6     123456795
      12     123456801
      20     123456809
      11     123456800
      25     123456814
      29     123456818
      22     123456811
      10     123456799
      18     123456807
       7     123456796
      23     123456812
      19     123456808
      24     123456813

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|30|30|0.033363828|mops|mopspersec|523125834|38486903||79.395|0.97|0.91|62|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              31

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       2     123456791
       0     123456789
      13     123456802
       3     123456792
      10     123456799
      29     123456818
      12     123456801
      11     123456800
      28     123456817
       8     123456797
      14     123456803
      22     123456811
      27     123456816
       6     123456795
       7     123456796
       4     123456793
      15     123456804
      26     123456815
      23     123456812
       9     123456798
      25     123456814
      16     123456805
      30     123456819
      17     123456806
      21     123456810
      18     123456807
      24     123456813
      20     123456809
      19     123456808

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|31|31|0.038786315|mops|mopspersec|535742288|38977238||80.098|0.96|0.95|72|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              32

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
      25     123456814
       2     123456791
      31     123456820
      30     123456819
       0     123456789
      29     123456818
      23     123456812
      26     123456815
      24     123456813
      27     123456816
       5     123456794
      28     123456817
      22     123456811
       6     123456795
      14     123456803
       8     123456797
      13     123456802
       9     123456798
      20     123456809
      19     123456808
      12     123456801
       7     123456796
      15     123456804
       3     123456792
      21     123456810
      10     123456799
      18     123456807
      16     123456805
      11     123456800
      17     123456806

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|32|32|0.038647083|mops|mopspersec|523228308|37923294||81.711|1.00|0.93|114|static|
14 November 2012 05:09:01 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              1

  Thread   Seed  I   X(I)

       0     123456789

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:01 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|1|1|0.162203886|mops|mopspersec|547642191|38817807||96.307|0.77|1.44|0|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              2

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|2|2|0.091116999|mops|mopspersec|551760696|41540000||93.206|0.79|1.38|1|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              3

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|3|3|0.064454434|mops|mopspersec|576801372|43539887||86.651|0.84|1.35|2|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              4

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790
       3     123456792
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|4|4|0.052223269|mops|mopspersec|558607266|46292165||91.122|0.80|1.26|3|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              5

  Thread   Seed  I   X(I)

       0     123456789
       3     123456792
       2     123456791
       4     123456793
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|5|5|0.044993350|mops|mopspersec|584962690|49876527||89.748|0.79|1.24|4|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              6

  Thread   Seed  I   X(I)

       0     123456789
       4     123456793
       5     123456794
       1     123456790
       2     123456791
       3     123456792

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|6|6|0.038695228|mops|mopspersec|605179879|50395111||90.797|0.84|1.27|5|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              7

  Thread   Seed  I   X(I)

       6     123456795
       2     123456791
       0     123456789
       5     123456794
       1     123456790
       3     123456792
       4     123456793

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|7|7|0.035343848|mops|mopspersec|589678210|57013105||87.145|0.79|1.24|6|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              8

  Thread   Seed  I   X(I)

       6     123456795
       3     123456792
       0     123456789
       7     123456796
       2     123456791
       1     123456790
       4     123456793
       5     123456794

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|8|8|0.031691616|mops|mopspersec|633456122|54845332||79.231|0.86|1.24|8|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              9

  Thread   Seed  I   X(I)

       6     123456795
       8     123456797
       3     123456792
       2     123456791
       0     123456789
       7     123456796
       5     123456794
       4     123456793
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|9|9|0.042652639|mops|mopspersec|710953724|92050633||89.444|0.77|0.94|8|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              10

  Thread   Seed  I   X(I)

       6     123456795
       4     123456793
       8     123456797
       5     123456794
       0     123456789
       9     123456798
       1     123456790
       3     123456792
       7     123456796
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|10|10|0.040073706|mops|mopspersec|727998251|90045308||83.932|0.83|0.84|9|dynamic|
14 November 2012 05:09:02 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              11

  Thread   Seed  I   X(I)

      10     123456799
       9     123456798
       0     123456789
       8     123456797
       3     123456792
       5     123456794
       1     123456790
       2     123456791
       4     123456793
       6     123456795
       7     123456796

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:02 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|11|11|0.038338158|mops|mopspersec|713471729|84073966||82.973|0.82|0.82|10|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              12

  Thread   Seed  I   X(I)

      10     123456799
       4     123456793
       9     123456798
       0     123456789
       6     123456795
       1     123456790
      11     123456800
       3     123456792
       5     123456794
       2     123456791
       7     123456796
       8     123456797

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|12|12|0.034830726|mops|mopspersec|675107647|76541456||84.193|0.80|0.82|11|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              13

  Thread   Seed  I   X(I)

       6     123456795
       0     123456789
       4     123456793
       3     123456792
       8     123456797
       1     123456790
      10     123456799
      12     123456801
       5     123456794
       2     123456791
       7     123456796
       9     123456798
      11     123456800

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|13|13|0.034397005|mops|mopspersec|686566595|81563408||84.210|0.84|0.77|12|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              14

  Thread   Seed  I   X(I)

      12     123456801
      11     123456800
      10     123456799
       7     123456796
       8     123456797
       6     123456795
       3     123456792
       0     123456789
       4     123456793
       5     123456794
       2     123456791
       9     123456798
       1     123456790
      13     123456802

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|14|14|0.029396264|mops|mopspersec|673476540|71469059||88.212|0.97|0.74|13|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              15

  Thread   Seed  I   X(I)

      10     123456799
       3     123456792
      12     123456801
      13     123456802
      14     123456803
       1     123456790
       7     123456796
       5     123456794
       4     123456793
       6     123456795
       8     123456797
       0     123456789
      11     123456800
       9     123456798
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|15|15|0.030131973|mops|mopspersec|689762763|78493245||84.691|0.95|0.71|14|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              16

  Thread   Seed  I   X(I)

      15     123456804
       1     123456790
       6     123456795
       4     123456793
       0     123456789
       8     123456797
      13     123456802
       2     123456791
       5     123456794
       9     123456798
       7     123456796
      12     123456801
      11     123456800
       3     123456792
      14     123456803
      10     123456799

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|16|16|0.030231220|mops|mopspersec|674980772|76951582||83.166|0.91|0.69|15|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              17

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       0     123456789
       2     123456791
      15     123456804
      11     123456800
      12     123456801
       9     123456798
       3     123456792
       7     123456796
       4     123456793
      10     123456799
       8     123456797
       6     123456795
      16     123456805
      14     123456803
      13     123456802

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|17|17|0.040568101|mops|mopspersec|540540847|38262998||84.367|0.96|0.92|30|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              18

  Thread   Seed  I   X(I)

       1     123456790
       3     123456792
       0     123456789
       6     123456795
       2     123456791
       7     123456796
      13     123456802
       5     123456794
       8     123456797
      12     123456801
       4     123456793
      14     123456803
      16     123456805
      17     123456806
      15     123456804
       9     123456798
      11     123456800
      10     123456799

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|18|18|0.041878050|mops|mopspersec|530301609|38070759||80.888|0.97|0.94|38|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              19

  Thread   Seed  I   X(I)

       1     123456790
       6     123456795
       2     123456791
       0     123456789
      10     123456799
      17     123456806
      11     123456800
       3     123456792
      16     123456805
       4     123456793
       9     123456798
       7     123456796
       5     123456794
       8     123456797
      12     123456801
      14     123456803
      18     123456807
      13     123456802
      15     123456804

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|19|19|0.039837111|mops|mopspersec|529221291|38578378||82.186|0.87|1.16|36|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              20

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       9     123456798
       7     123456796
      12     123456801
       5     123456794
      15     123456804
       6     123456795
       8     123456797
      11     123456800
      19     123456808
      10     123456799
      13     123456802
      16     123456805
       3     123456792
      17     123456806
      14     123456803
       2     123456791
      18     123456807

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|20|20|0.040805042|mops|mopspersec|545937994|39326192||79.928|0.95|0.92|40|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              21

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
      19     123456808
      18     123456807
      13     123456802
      12     123456801
       5     123456794
       3     123456792
      15     123456804
       9     123456798
      16     123456805
       2     123456791
      11     123456800
      14     123456803
      10     123456799
      17     123456806
       6     123456795
       7     123456796
       8     123456797
      20     123456809

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|21|21|0.041125196|mops|mopspersec|547685809|39527694||81.146|0.98|0.95|45|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              22

  Thread   Seed  I   X(I)

       1     123456790
       7     123456796
       0     123456789
       6     123456795
      11     123456800
      10     123456799
       8     123456797
      20     123456809
      12     123456801
       2     123456791
      19     123456808
      18     123456807
       3     123456792
      13     123456802
       9     123456798
       5     123456794
       4     123456793
      16     123456805
      14     123456803
      21     123456810
      15     123456804
      17     123456806

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|22|22|0.039805720|mops|mopspersec|544787988|39098964||84.180|0.97|0.96|57|dynamic|
14 November 2012 05:09:03 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              23

  Thread   Seed  I   X(I)

       1     123456790
       3     123456792
       2     123456791
      15     123456804
       0     123456789
      16     123456805
      21     123456810
      11     123456800
       4     123456793
      10     123456799
      20     123456809
      19     123456808
       9     123456798
      12     123456801
      18     123456807
       5     123456794
      13     123456802
       7     123456796
       6     123456795
       8     123456797
      14     123456803
      17     123456806
      22     123456811

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:03 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|23|23|0.043926810|mops|mopspersec|527813954|38838485||81.922|0.92|1.08|45|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              24

  Thread   Seed  I   X(I)

       1     123456790
       7     123456796
       5     123456794
       0     123456789
      21     123456810
       6     123456795
      22     123456811
      12     123456801
      20     123456809
       2     123456791
       4     123456793
       8     123456797
      10     123456799
      13     123456802
       3     123456792
      17     123456806
      19     123456808
      18     123456807
       9     123456798
      14     123456803
      11     123456800
      15     123456804
      16     123456805
      23     123456812

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|24|24|0.040555278|mops|mopspersec|522439627|38072635||83.060|0.98|0.92|64|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              25

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
      22     123456811
      15     123456804
       5     123456794
       3     123456792
      24     123456813
       9     123456798
      21     123456810
      12     123456801
       6     123456795
      14     123456803
      10     123456799
      20     123456809
      13     123456802
       7     123456796
      16     123456805
      17     123456806
      11     123456800
      23     123456812
      19     123456808
      18     123456807
       8     123456797

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|25|25|0.039529455|mops|mopspersec|537858821|39424684||86.763|0.91|1.14|70|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              26

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      23     123456812
       5     123456794
      16     123456805
       9     123456798
      22     123456811
       3     123456792
      25     123456814
       6     123456795
      17     123456806
      18     123456807
       7     123456796
      15     123456804
      21     123456810
       8     123456797
      19     123456808
      14     123456803
      24     123456813
      20     123456809
      13     123456802
      10     123456799
      11     123456800
      12     123456801

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|26|26|0.046991098|mops|mopspersec|524982367|38393520||85.593|0.90|1.11|84|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              27

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       2     123456791
       0     123456789
       6     123456795
       3     123456792
      25     123456814
       7     123456796
      24     123456813
       4     123456793
       8     123456797
      17     123456806
       9     123456798
      10     123456799
      13     123456802
      14     123456803
      15     123456804
      23     123456812
      16     123456805
      11     123456800
      22     123456811
      26     123456815
      12     123456801
      18     123456807
      21     123456810
      20     123456809
      19     123456808

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|27|27|0.043009326|mops|mopspersec|515150180|38154721||84.199|0.85|1.21|81|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              28

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      25     123456814
       5     123456794
       6     123456795
      17     123456806
       9     123456798
      27     123456816
      24     123456813
       3     123456792
       7     123456796
      16     123456805
       8     123456797
      18     123456807
      26     123456815
      22     123456811
      21     123456810
      19     123456808
      15     123456804
      23     123456812
      10     123456799
      14     123456803
      20     123456809
      13     123456802
      12     123456801
      11     123456800

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|28|28|0.040513664|mops|mopspersec|530279339|38831613||84.132|0.89|1.33|85|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              29

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      26     123456815
      17     123456806
       5     123456794
      16     123456805
       7     123456796
      28     123456817
      25     123456814
       3     123456792
       6     123456795
      18     123456807
      15     123456804
      24     123456813
       8     123456797
      22     123456811
       9     123456798
      19     123456808
      23     123456812
      14     123456803
      13     123456802
      27     123456816
      12     123456801
      21     123456810
      10     123456799
      20     123456809
      11     123456800

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|29|29|0.043137553|mops|mopspersec|534454105|38215089||82.424|0.90|1.13|83|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              30

  Thread   Seed  I   X(I)

       1     123456790
       3     123456792
       2     123456791
       0     123456789
      10     123456799
      18     123456807
      11     123456800
       6     123456795
      27     123456816
      12     123456801
       4     123456793
       9     123456798
      17     123456806
      26     123456815
      13     123456802
       8     123456797
      16     123456805
      15     123456804
      25     123456814
      14     123456803
      19     123456808
       7     123456796
      28     123456817
      24     123456813
       5     123456794
      29     123456818
      20     123456809
      23     123456812
      22     123456811
      21     123456810

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|30|30|0.040021851|mops|mopspersec|548613158|39102057||82.107|0.88|1.19|68|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              31

  Thread   Seed  I   X(I)

       1     123456790
       2     123456791
       3     123456792
       0     123456789
       4     123456793
      28     123456817
       9     123456798
      21     123456810
      12     123456801
      13     123456802
       5     123456794
      30     123456819
      27     123456816
      20     123456809
      11     123456800
       6     123456795
       7     123456796
      14     123456803
      15     123456804
      26     123456815
      19     123456808
      10     123456799
      16     123456805
       8     123456797
      22     123456811
      25     123456814
      29     123456818
      18     123456807
      17     123456806
      23     123456812
      24     123456813

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|31|31|0.041471156|mops|mopspersec|528248701|38008345||82.377|0.89|1.07|89|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              32

  Thread   Seed  I   X(I)

       1     123456790
       2     123456791
       5     123456794
       0     123456789
      13     123456802
      30     123456819
      17     123456806
       4     123456793
       3     123456792
       6     123456795
      29     123456818
      19     123456808
       7     123456796
      21     123456810
       8     123456797
      28     123456817
      20     123456809
       9     123456798
      27     123456816
      11     123456800
      31     123456820
      22     123456811
      15     123456804
      25     123456814
      18     123456807
      10     123456799
      14     123456803
      24     123456813
      23     123456812
      26     123456815
      12     123456801
      16     123456805

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:04 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|32|32|0.038400259|mops|mopspersec|538182272|38571404||83.377|0.89|1.21|105|dynamic|
14 November 2012 05:09:04 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              1

  Thread   Seed  I   X(I)

       0     123456789

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|1|1|0.162576270|mops|mopspersec|545485134|38793734||95.719|0.78|1.45|0|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              2

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|2|2|0.090187856|mops|mopspersec|560700796|42150602||93.805|0.80|1.38|1|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              3

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|3|3|0.064184293|mops|mopspersec|573639994|45099212||88.851|0.83|1.33|2|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              4

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790
       2     123456791
       3     123456792

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|4|4|0.051261699|mops|mopspersec|549507149|46199134||87.194|0.79|1.32|3|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              5

  Thread   Seed  I   X(I)

       0     123456789
       3     123456792
       1     123456790
       4     123456793
       2     123456791

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|5|5|0.043733762|mops|mopspersec|572829008|50126222||88.319|0.82|1.21|4|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              6

  Thread   Seed  I   X(I)

       0     123456789
       1     123456790
       4     123456793
       2     123456791
       5     123456794
       3     123456792

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|6|6|0.038205958|mops|mopspersec|611171074|50445375||87.681|0.86|1.28|5|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              7

  Thread   Seed  I   X(I)

       6     123456795
       1     123456790
       0     123456789
       4     123456793
       5     123456794
       2     123456791
       3     123456792

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|7|7|0.034955164|mops|mopspersec|591735336|57327157||86.394|0.77|1.24|7|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              8

  Thread   Seed  I   X(I)

       6     123456795
       7     123456796
       0     123456789
       2     123456791
       5     123456794
       1     123456790
       3     123456792
       4     123456793

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|8|8|0.031342501|mops|mopspersec|635486628|54342652||84.229|0.87|1.23|8|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              9

  Thread   Seed  I   X(I)

       6     123456795
       5     123456794
       0     123456789
       2     123456791
       4     123456793
       8     123456797
       3     123456792
       7     123456796
       1     123456790

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|9|9|0.039706221|mops|mopspersec|712372193|85731202||85.197|0.81|0.92|9|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              10

  Thread   Seed  I   X(I)

       6     123456795
       9     123456798
       0     123456789
       8     123456797
       4     123456793
       7     123456796
       2     123456791
       1     123456790
       3     123456792
       5     123456794

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|10|10|0.040495881|mops|mopspersec|726317240|89590893||83.679|0.81|0.85|9|guided,4|
14 November 2012 05:09:05 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              11

  Thread   Seed  I   X(I)

      10     123456799
       2     123456791
       0     123456789
       3     123456792
       4     123456793
       6     123456795
       7     123456796
       9     123456798
       8     123456797
       1     123456790
       5     123456794

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:05 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|11|11|0.038144315|mops|mopspersec|713579634|85472817||82.430|0.82|0.82|10|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              12

  Thread   Seed  I   X(I)

       6     123456795
       1     123456790
       8     123456797
      11     123456800
       7     123456796
       0     123456789
       4     123456793
       5     123456794
      10     123456799
       9     123456798
       2     123456791
       3     123456792

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|12|12|0.036268602|mops|mopspersec|666875292|78135863||82.428|0.91|0.77|11|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              13

  Thread   Seed  I   X(I)

      12     123456801
       2     123456791
       6     123456795
      10     123456799
       0     123456789
       4     123456793
       1     123456790
       3     123456792
       8     123456797
       7     123456796
       9     123456798
      11     123456800
       5     123456794

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|13|13|0.034371219|mops|mopspersec|692862776|82388188||83.999|0.85|0.77|12|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              14

  Thread   Seed  I   X(I)

      12     123456801
      13     123456802
       7     123456796
       8     123456797
       3     123456792
       0     123456789
      10     123456799
       1     123456790
      11     123456800
       6     123456795
       9     123456798
       2     123456791
       4     123456793
       5     123456794

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|14|14|0.031268558|mops|mopspersec|700655017|80607806||86.089|0.91|0.72|13|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              15

  Thread   Seed  I   X(I)

      10     123456799
       5     123456794
       6     123456795
       4     123456793
       8     123456797
       0     123456789
      14     123456803
      11     123456800
       7     123456796
       9     123456798
      13     123456802
       2     123456791
      12     123456801
       1     123456790
       3     123456792

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|15|15|0.029890826|mops|mopspersec|695575989|80342740||80.708|0.93|0.72|14|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              16

  Thread   Seed  I   X(I)

      14     123456803
       0     123456789
       3     123456792
       1     123456790
       2     123456791
       4     123456793
       6     123456795
       8     123456797
       5     123456794
      15     123456804
      11     123456800
      13     123456802
       9     123456798
      12     123456801
       7     123456796
      10     123456799

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|16|16|0.029573007|mops|mopspersec|665943576|76770712||81.366|0.93|0.68|15|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              17

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       2     123456791
       6     123456795
      14     123456803
       0     123456789
      12     123456801
       3     123456792
      11     123456800
       4     123456793
      10     123456799
       7     123456796
       9     123456798
      13     123456802
       8     123456797
      15     123456804
      16     123456805

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|17|17|0.041126298|mops|mopspersec|522361534|37587535||84.045|0.95|0.96|25|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              18

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       0     123456789
       4     123456793
      16     123456805
      15     123456804
       6     123456795
       7     123456796
       3     123456792
       2     123456791
      14     123456803
      11     123456800
      12     123456801
      17     123456806
       8     123456797
      10     123456799
       9     123456798
      13     123456802

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|18|18|0.041892457|mops|mopspersec|545729318|39000634||84.692|0.93|1.06|38|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              19

  Thread   Seed  I   X(I)

       4     123456793
       0     123456789
       3     123456792
       2     123456791
       1     123456790
       5     123456794
       6     123456795
      17     123456806
       9     123456798
       8     123456797
      16     123456805
       7     123456796
      10     123456799
      18     123456807
      11     123456800
      15     123456804
      12     123456801
      14     123456803
      13     123456802

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|19|19|0.040825634|mops|mopspersec|532097989|38151699||89.315|0.89|1.22|55|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              20

  Thread   Seed  I   X(I)

       1     123456790
       6     123456795
       0     123456789
       2     123456791
       5     123456794
      12     123456801
       8     123456797
      13     123456802
      18     123456807
       7     123456796
      10     123456799
       3     123456792
      11     123456800
      17     123456806
       9     123456798
       4     123456793
      16     123456805
      19     123456808
      15     123456804
      14     123456803

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|20|20|0.048636055|mops|mopspersec|530171363|38504817||82.888|0.94|1.02|52|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              21

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
      16     123456805
       8     123456797
       5     123456794
      15     123456804
       9     123456798
       6     123456795
      12     123456801
      19     123456808
       7     123456796
       3     123456792
      17     123456806
      11     123456800
      18     123456807
      13     123456802
      20     123456809
      10     123456799
      14     123456803

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|21|21|0.039808229|mops|mopspersec|535973468|39014475||83.349|0.89|1.16|48|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              22

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
      20     123456809
       5     123456794
      13     123456802
       6     123456795
      12     123456801
      21     123456810
       3     123456792
      19     123456808
      17     123456806
      14     123456803
      16     123456805
      18     123456807
      11     123456800
       7     123456796
      10     123456799
      15     123456804
       9     123456798
       8     123456797

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:06 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|22|22|0.039059081|mops|mopspersec|538552259|38804145||84.945|0.86|1.23|54|guided,4|
14 November 2012 05:09:06 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              23

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
       3     123456792
       5     123456794
      18     123456807
      19     123456808
       6     123456795
       8     123456797
      20     123456809
      17     123456806
      16     123456805
       7     123456796
      21     123456810
       9     123456798
      15     123456804
      10     123456799
      13     123456802
      12     123456801
      14     123456803
      11     123456800
      22     123456811

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|23|23|0.042491034|mops|mopspersec|529049635|38415786||85.099|0.90|1.15|67|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              24

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       0     123456789
       4     123456793
       2     123456791
       3     123456792
      13     123456802
       6     123456795
      22     123456811
      14     123456803
       7     123456796
      18     123456807
      12     123456801
      11     123456800
      21     123456810
       8     123456797
      15     123456804
      17     123456806
      20     123456809
      19     123456808
       9     123456798
      10     123456799
      16     123456805
      23     123456812

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|24|24|0.045879599|mops|mopspersec|532591907|39333329||83.150|0.91|1.07|60|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              25

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      13     123456802
       5     123456794
       6     123456795
      14     123456803
      23     123456812
       9     123456798
       3     123456792
      12     123456801
      16     123456805
      10     123456799
      11     123456800
      17     123456806
       7     123456796
      15     123456804
      22     123456811
      18     123456807
       8     123456797
      21     123456810
      19     123456808
      20     123456809
      24     123456813

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|25|25|0.042840348|mops|mopspersec|507957870|38100576||80.154|0.97|0.91|60|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              26

  Thread   Seed  I   X(I)

       1     123456790
       3     123456792
       4     123456793
       2     123456791
       0     123456789
      15     123456804
      24     123456813
      14     123456803
       6     123456795
      16     123456805
      23     123456812
      13     123456802
       5     123456794
       7     123456796
      25     123456814
      11     123456800
      12     123456801
      17     123456806
       8     123456797
      20     123456809
      22     123456811
      10     123456799
       9     123456798
      18     123456807
      19     123456808
      21     123456810

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|26|26|0.040078108|mops|mopspersec|502819747|37605797||81.853|0.95|0.93|64|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              27

  Thread   Seed  I   X(I)

       1     123456790
       2     123456791
       7     123456796
       0     123456789
      20     123456809
      10     123456799
      11     123456800
      19     123456808
      25     123456814
      18     123456807
       3     123456792
       9     123456798
      14     123456803
      13     123456802
      12     123456801
      15     123456804
      17     123456806
       8     123456797
       6     123456795
      24     123456813
       4     123456793
      16     123456805
      21     123456810
      26     123456815
       5     123456794
      23     123456812
      22     123456811

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|27|27|0.035486452|mops|mopspersec|559868416|39454200||83.666|0.93|1.03|56|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              28

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       0     123456789
       2     123456791
      16     123456805
       5     123456794
      26     123456815
       6     123456795
      17     123456806
      11     123456800
      25     123456814
       3     123456792
      21     123456810
      10     123456799
      18     123456807
      24     123456813
      12     123456801
      20     123456809
       8     123456797
      14     123456803
       7     123456796
      19     123456808
      22     123456811
      27     123456816
      15     123456804
      23     123456812
       9     123456798
      13     123456802

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|28|28|0.039075109|mops|mopspersec|520149033|38359768||81.033|0.92|0.96|59|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              29

  Thread   Seed  I   X(I)

       1     123456790
       2     123456791
       7     123456796
       0     123456789
      27     123456816
      26     123456815
      16     123456805
      15     123456804
       8     123456797
      14     123456803
       6     123456795
      25     123456814
      11     123456800
       3     123456792
      12     123456801
      17     123456806
       9     123456798
      22     123456811
      13     123456802
      28     123456817
      18     123456807
      21     123456810
      19     123456808
      23     123456812
       5     123456794
      10     123456799
       4     123456793
      20     123456809
      24     123456813

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|29|29|0.036262543|mops|mopspersec|518086459|38525281||80.435|0.95|0.92|68|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              30

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       7     123456796
       0     123456789
      27     123456816
      15     123456804
      16     123456805
      17     123456806
      14     123456803
      26     123456815
       6     123456795
       5     123456794
      29     123456818
       3     123456792
      21     123456810
      22     123456811
      11     123456800
      18     123456807
      19     123456808
      12     123456801
      23     123456812
      20     123456809
      25     123456814
      28     123456817
       8     123456797
      24     123456813
      13     123456802
      10     123456799
       9     123456798

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|30|30|0.034048967|mops|mopspersec|541979827|38703750||81.056|0.86|1.00|66|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              31

  Thread   Seed  I   X(I)

       1     123456790
       4     123456793
       2     123456791
       0     123456789
      29     123456818
       9     123456798
      28     123456817
       5     123456794
      10     123456799
      20     123456809
       8     123456797
       3     123456792
      27     123456816
       6     123456795
      11     123456800
      25     123456814
      23     123456812
      24     123456813
       7     123456796
      22     123456811
      21     123456810
      19     123456808
      14     123456803
      15     123456804
      12     123456801
      13     123456802
      26     123456815
      16     123456805
      18     123456807
      30     123456819
      17     123456806

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|31|31|0.040359712|mops|mopspersec|515063390|38045505||81.309|0.94|0.97|64|guided,4|
14 November 2012 05:09:07 PM

RANDOM_OPENMP
  C version
  An OpenMP program using random numbers.
  The random numbers depend on a seed.
  We need to insure that each OpenMP thread
  starts with a different seed.

  Number of processors available = 16
  Number of threads =              32

  Thread   Seed  I   X(I)

       1     123456790
       5     123456794
       0     123456789
       2     123456791
       8     123456797
      30     123456819
      19     123456808
      29     123456818
      20     123456809
       6     123456795
       7     123456796
      21     123456810
      10     123456799
      18     123456807
       3     123456792
      28     123456817
      11     123456800
       4     123456793
      25     123456814
      27     123456816
      22     123456811
      26     123456815
      17     123456806
      31     123456820
      12     123456801
       9     123456798
      24     123456813
      16     123456805
      23     123456812
      13     123456802
      15     123456804
      14     123456803

RANDOM_OPENMP
  Normal end of execution.

14 November 2012 05:09:07 PM
stat_id|suite| Performance counter stats for './random_openmp':|class|32|32|0.041169162|mops|mopspersec|531124673|39248383||80.408|0.91|0.94|86|guided,4|
